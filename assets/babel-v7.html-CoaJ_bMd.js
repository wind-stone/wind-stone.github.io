import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, d as createBaseVNode, a as createVNode, e as withCtx, f as createTextVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_RouteLink = resolveComponent("RouteLink");
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[6] || (_cache[6] = createStaticVNode('<h1 id="babel-7" tabindex="-1"><a class="header-anchor" href="#babel-7"><span>Babel 7</span></a></h1><p>官方中文文档: <a href="https://www.babeljs.cn/" target="_blank" rel="noopener noreferrer">https://www.babeljs.cn/</a></p><h2 id="preset" tabindex="-1"><a class="header-anchor" href="#preset"><span>preset</span></a></h2><h2 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins"><span>plugins</span></a></h2><h2 id="preset-和-plugins-使用顺序" tabindex="-1"><a class="header-anchor" href="#preset-和-plugins-使用顺序"><span>preset 和 plugins 使用顺序</span></a></h2><ul><li>插件在 Presets 前运行。</li><li>插件顺序从前往后排列。</li><li>Presets 顺序是颠倒的（从后往前）。</li></ul><h2 id="配置方式" tabindex="-1"><a class="header-anchor" href="#配置方式"><span>配置方式</span></a></h2><p>配置共有三种方式：</p><ol><li>在<code>package.json</code>中设置<code>babel</code>字段。</li><li><code>.babelrc</code>文件或<code>.babelrc.js</code>文件。</li><li><code>babel.config.js</code>文件。</li></ol><h3 id="配置方式-1" tabindex="-1"><a class="header-anchor" href="#配置方式-1"><span>配置方式 1</span></a></h3><p>第<code>1</code>种方式，需要在<code>package.json</code>文件里添加<code>babel</code>配置项，配置如下：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;babel-test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;devDependencies&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">       &quot;@babel/core&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^7.4.5&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">       &quot;@babel/cli&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^7.4.4&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">       &quot;@babel/preset-env&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^7.4.5&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   },</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;babel&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">       &quot;presets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;@babel/preset-env&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置方式-2" tabindex="-1"><a class="header-anchor" href="#配置方式-2"><span>配置方式 2</span></a></h3><p>第<code>2</code>种方式，需要创建<code>.babelrc</code>文件或<code>.babelrc.js</code>文件。</p><p><code>.babelrc</code>文件：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;presets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;@babel/preset-env&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或<code>.babelrc.js</code>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Webpack 的配置文件也是这种写法</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    presets</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该类配置文件是针对文件夹级别的配置，即项目根目录文件夹下或其子文件夹下都可以配置和应用该类配置文件，但子文件夹里的配置文件会覆盖祖先文件夹里的配置文件（TODO: 是配置对象整体覆盖还是合并配置对象覆盖相同的选项），因此通过这种方式，可以给不同的文件夹层级设置不同的规则。</p><h3 id="配置方式-3" tabindex="-1"><a class="header-anchor" href="#配置方式-3"><span>配置方式 3</span></a></h3><p>第<code>3</code>种方式，需要在项目根目录创建<code>babel.config.js</code>文件，该配置文件是针对整个项目，整个项目仅能有一个该类配置文件，且必须放置在项目根目录里。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    presets</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，</p><ul><li>方式<code>1</code>这种在<code>package.json</code>里添加<code>babel</code>配置项的方式，和方式<code>2</code>和<code>3</code>这种创建配置文件的方式，没有本质区别，主要看个人习惯。</li><li><code>.babelrc</code>文件若是放置在项目根目录，其效果跟<code>babel.config.js</code>是一致的，若两种类型的配置文件都存在，则<code>.babelrc</code>文件会覆盖<code>babel.config.js</code>文件。</li></ul><h2 id="常用插件" tabindex="-1"><a class="header-anchor" href="#常用插件"><span>常用插件</span></a></h2><table><thead><tr><th>包名</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>@babel/plugin-transform-runtime</td><td>复用工具函数</td><td>非必装开发依赖，和@babel/runtime同时存在</td></tr><tr><td>@babel/cli</td><td>命令行执行babel命令工具</td><td>非必装开发依赖，packages.json的script中使用了babel命令则需安装</td></tr><tr><td>babel-loader</td><td>webpack中使用babel加载文件</td><td>非必装开发依赖，webpack项目中使用</td></tr><tr><td>@babel/plugin-*</td><td>babel编译功能实现插件</td><td>开发依赖，按照需要的功能安装</td></tr><tr><td>@babel/preset-*</td><td>功能实现插件预设</td><td>开发依赖，按照需要的功能安装，js语言新特性转换推荐使用preset-env</td></tr><tr><td>@babel/polyfill</td><td>低版本浏览器兼容库</td><td>非必装生产依赖，已不推荐使用，推荐通过preset-env的useBuiltIns属性按需引入</td></tr><tr><td>core-js@*</td><td>低版本浏览器兼容库</td><td>非必装生产依赖，通过preset-env引入polyfill需安装此包，并通过corejs指定版本</td></tr><tr><td>@babel/runtime-corejs*</td><td>不污染变量的低版本浏览器兼容库</td><td>非必装生产依赖，plugin-transform-runtime设置开启后，可以不污染变量的引入polyfill</td></tr></tbody></table><h2 id="babel-core" tabindex="-1"><a class="header-anchor" href="#babel-core"><span>@babel/core</span></a></h2><p>Babel 编译的核心包，提供了一些方法如：</p><ul><li><code>transform</code>/<code>transformSync</code>/<code>transformAsync</code></li><li><code>transformFile</code>/<code>transformFile</code>/<code>transformFile</code></li><li><code>transformFromAst</code>/<code>transformFromAstSync</code>/<code>transformFromAstAsync</code></li><li><code>parse</code>/<code>parseSync</code>/<code>parseAsync</code></li><li>以及其他一些高级 API</li></ul><p>详情请见<a href="https://www.babeljs.cn/docs/babel-core" target="_blank" rel="noopener noreferrer">Babel 官网 - @babel/core</a>。</p><p>需要注意的是，若是不使用插件或预设，则 Babel 会原封不动的将源码输出。</p><h2 id="babel-runtime" tabindex="-1"><a class="header-anchor" href="#babel-runtime"><span>@babel/runtime</span></a></h2>', 32)),
    createBaseVNode("p", null, [
      createVNode(_component_RouteLink, { to: "/es6/babel/@babel/runtime.html" }, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createBaseVNode("code", null, "@babel/runtime", -1)
        ])),
        _: 1
      }),
      _cache[1] || (_cache[1] = createTextVNode("，以模块化方式包含了 Babel 运行时辅助工具函数的实现的包，")),
      _cache[2] || (_cache[2] = createBaseVNode("code", null, "@babel/plugin-transform-runtime", -1)),
      _cache[3] || (_cache[3] = createTextVNode("插件依赖该插件作为运行时依赖。"))
    ]),
    _cache[7] || (_cache[7] = createBaseVNode("h2", {
      id: "babel-plugin-transform-runtime",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#babel-plugin-transform-runtime"
      }, [
        createBaseVNode("span", null, "@babel/plugin-transform-runtime")
      ])
    ], -1)),
    createBaseVNode("p", null, [
      createVNode(_component_RouteLink, { to: "/es6/babel/@babel/plugin-transform-runtime.html" }, {
        default: withCtx(() => _cache[4] || (_cache[4] = [
          createTextVNode("@babel/plugin-transform-runtime")
        ])),
        _: 1
      }),
      _cache[5] || (_cache[5] = createTextVNode("。"))
    ]),
    _cache[8] || (_cache[8] = createStaticVNode('<h2 id="todo" tabindex="-1"><a class="header-anchor" href="#todo"><span>TODO</span></a></h2><ul><li>理清 Babel 各个插件之间的关系。</li></ul><p>以前的 babel-transform-runtime 是包含了 helpers 和 polyfill。而现在的 @babel/runtime 只包含 helper，如果需要 polyfill，则需主动安装 core-js 的 runtime版本 @babel/runtime-corejs2 。并在 @babel/plugin-transform-runtime 的插件中做配置。</p><ul><li><p>monorepos 的意义</p></li><li><p>Babel 7 里项目根目录下配置的<code>babel.config.js</code>会对<code>node_modules</code>、<code>symlinks</code>和<code>monorepos</code>生效，详见<a href="https://babeljs.io/docs/en/v7-migration#config-lookup-changes" target="_blank" rel="noopener noreferrer">Upgrade to Babel 7 - Config Lookup Changes</a>。但是<code>node_modules</code>下的模块一般都是编译好的，需要剔除对他们的编译。</p></li></ul><p>参考：</p><ul><li><a href="https://segmentfault.com/a/1190000018358854" target="_blank" rel="noopener noreferrer">一文读懂 babel7 的配置文件加载逻辑</a></li></ul><h2 id="常用-preset" tabindex="-1"><a class="header-anchor" href="#常用-preset"><span>常用 preset</span></a></h2><h3 id="vue-babel-preset-app" tabindex="-1"><a class="header-anchor" href="#vue-babel-preset-app"><span>@vue/babel-preset-app</span></a></h3><p>默认会包含以下<code>polyfill</code>：</p><ul><li><code>es6.array.iterator</code></li><li><code>es6.promise</code></li><li><code>es6.object.assign</code></li><li><code>es7.promise.finally</code></li></ul><p>详见<a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/babel-preset-app" target="_blank" rel="noopener noreferrer">vue-cli 之 @vue/babel-preset-app</a></p>', 11)),
    createVNode(_component_global_config)
  ]);
}
const babelV7_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "babel-v7.html.vue"]]);
const data = JSON.parse('{"path":"/es6/babel/babel-v7.html","title":"Babel 7","lang":"en-US","frontmatter":{"description":"Babel 7 官方中文文档: https://www.babeljs.cn/ preset plugins preset 和 plugins 使用顺序 插件在 Presets 前运行。 插件顺序从前往后排列。 Presets 顺序是颠倒的（从后往前）。 配置方式 配置共有三种方式： 在package.json中设置babel字段。 .babelrc文...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/es6/babel/babel-v7.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"Babel 7"}],["meta",{"property":"og:description","content":"Babel 7 官方中文文档: https://www.babeljs.cn/ preset plugins preset 和 plugins 使用顺序 插件在 Presets 前运行。 插件顺序从前往后排列。 Presets 顺序是颠倒的（从后往前）。 配置方式 配置共有三种方式： 在package.json中设置babel字段。 .babelrc文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2019-11-05T08:38:23.000Z"}],["meta",{"property":"article:modified_time","content":"2019-11-05T08:38:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Babel 7\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2019-11-05T08:38:23.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"preset","slug":"preset","link":"#preset","children":[]},{"level":2,"title":"plugins","slug":"plugins","link":"#plugins","children":[]},{"level":2,"title":"preset 和 plugins 使用顺序","slug":"preset-和-plugins-使用顺序","link":"#preset-和-plugins-使用顺序","children":[]},{"level":2,"title":"配置方式","slug":"配置方式","link":"#配置方式","children":[{"level":3,"title":"配置方式 1","slug":"配置方式-1","link":"#配置方式-1","children":[]},{"level":3,"title":"配置方式 2","slug":"配置方式-2","link":"#配置方式-2","children":[]},{"level":3,"title":"配置方式 3","slug":"配置方式-3","link":"#配置方式-3","children":[]}]},{"level":2,"title":"常用插件","slug":"常用插件","link":"#常用插件","children":[]},{"level":2,"title":"@babel/core","slug":"babel-core","link":"#babel-core","children":[]},{"level":2,"title":"@babel/runtime","slug":"babel-runtime","link":"#babel-runtime","children":[]},{"level":2,"title":"@babel/plugin-transform-runtime","slug":"babel-plugin-transform-runtime","link":"#babel-plugin-transform-runtime","children":[]},{"level":2,"title":"TODO","slug":"todo","link":"#todo","children":[]},{"level":2,"title":"常用 preset","slug":"常用-preset","link":"#常用-preset","children":[{"level":3,"title":"@vue/babel-preset-app","slug":"vue-babel-preset-app","link":"#vue-babel-preset-app","children":[]}]}],"git":{"createdTime":1572592259000,"updatedTime":1572943103000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":2}]},"readingTime":{"minutes":3.51,"words":1053},"filePathRelative":"es6/babel/babel-v7.md","localizedDate":"November 1, 2019","autoDesc":true}');
export {
  babelV7_html as comp,
  data
};
