import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, a as createVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createStaticVNode('<h1 id="changelog" tabindex="-1"><a class="header-anchor" href="#changelog"><span>Changelog</span></a></h1><h2 id="conventional-changelog-cli-自动生成日志" tabindex="-1"><a class="header-anchor" href="#conventional-changelog-cli-自动生成日志"><span>conventional-changelog-cli 自动生成日志</span></a></h2><p><a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli" target="_blank" rel="noopener noreferrer">conventional-changelog-cli</a></p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // -p: 即 --preset，预置模板，比如 angular/atom/codemirror/conventionalcommits/ember/eslint/express/jquery/jshint</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // -i: 即 --infile，读取 CHANGELOG 的文件路径</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // -s, 即 --same-file，设置输出 CHANGELOG 的文件路径与读取 CHANGELOG 的文件路径一致，设置了此项，就不需要设置输出文件了</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // --commit-path: 设置目录，将只基于该目录范围去生成日志</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // --tag-prefix: 标签前缀，在读标签时，只读取该前缀的标签</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;changelog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;conventional-changelog -p angular -i CHANGELOG.md -s  --commit-path=./ --tag-prefix=@ks/sso/&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>monorepo 项目里，需要为不同的子项目生成不同的 changelog，要解决两个问题：</p><ol><li><code>conventional-changelog-cli</code>在读取标签时，需要区分当前子项目的标签，可以用<code>--tag-prefix</code>选项指定子项目的标签前缀。</li><li>生成 changelog 时，只应该关注当前子项目目录内的提交，而其他目录的提交应该忽略，可以用<code>--commit-path</code>选项设置只基于给定目录去生成 changelog。</li></ol><p>可通过<code>conventional-changelog --help</code>查看所有可用选项</p>', 7)),
    createVNode(_component_global_config)
  ]);
}
const changelog_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "changelog.html.vue"]]);
const data = JSON.parse('{"path":"/front-end-engineering/tools/publish/changelog.html","title":"Changelog","lang":"en-US","frontmatter":{"description":"Changelog conventional-changelog-cli 自动生成日志 conventional-changelog-cli monorepo 项目里，需要为不同的子项目生成不同的 changelog，要解决两个问题： conventional-changelog-cli在读取标签时，需要区分当前子项目的标签，可以用--tag-pref...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/front-end-engineering/tools/publish/changelog.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"Changelog"}],["meta",{"property":"og:description","content":"Changelog conventional-changelog-cli 自动生成日志 conventional-changelog-cli monorepo 项目里，需要为不同的子项目生成不同的 changelog，要解决两个问题： conventional-changelog-cli在读取标签时，需要区分当前子项目的标签，可以用--tag-pref..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-31T12:47:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-31T12:47:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Changelog\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-31T12:47:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"conventional-changelog-cli 自动生成日志","slug":"conventional-changelog-cli-自动生成日志","link":"#conventional-changelog-cli-自动生成日志","children":[]}],"git":{"createdTime":1656315484000,"updatedTime":1730378820000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":0.92,"words":277},"filePathRelative":"front-end-engineering/tools/publish/changelog.md","localizedDate":"June 27, 2022","autoDesc":true}');
export {
  changelog_html as comp,
  data
};
