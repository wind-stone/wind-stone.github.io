import { r as resolveComponent, c as createElementBlock, d as createBaseVNode, a as createVNode, e as withCtx, b as createStaticVNode, o as openBlock, f as createTextVNode } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
const _hoisted_1 = { class: "table-of-contents" };
function _sfc_render(_ctx, _cache) {
  const _component_router_link = resolveComponent("router-link");
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[6] || (_cache[6] = createBaseVNode("h1", {
      id: "ngx-http-upstream-module-模块",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#ngx-http-upstream-module-模块"
      }, [
        createBaseVNode("span", null, "ngx_http_upstream_module 模块")
      ])
    ], -1)),
    createBaseVNode("nav", _hoisted_1, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#配置示例" }, {
            default: withCtx(() => _cache[0] || (_cache[0] = [
              createTextVNode("配置示例")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#指令" }, {
            default: withCtx(() => _cache[1] || (_cache[1] = [
              createTextVNode("指令")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#upstream" }, {
                default: withCtx(() => _cache[2] || (_cache[2] = [
                  createTextVNode("upstream")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#server" }, {
                default: withCtx(() => _cache[3] || (_cache[3] = [
                  createTextVNode("server")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#hash" }, {
                default: withCtx(() => _cache[4] || (_cache[4] = [
                  createTextVNode("hash")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#ip-hash" }, {
                default: withCtx(() => _cache[5] || (_cache[5] = [
                  createTextVNode("ip_hash")
                ])),
                _: 1
              })
            ])
          ])
        ])
      ])
    ]),
    _cache[7] || (_cache[7] = createStaticVNode('<p><code>ngx_http_upstream_module</code>模块用于定义一组服务器，可以被<code>proxy_pass</code>、<code>fastcgi_pass</code>、<code>uwsgi_pass</code>、<code>scgi_pass</code>、<code>memcached_pas</code>、<code>grpc_pass</code>指定引用。</p><h2 id="配置示例" tabindex="-1"><a class="header-anchor" href="#配置示例"><span>配置示例</span></a></h2><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend1.example.com       </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">weight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    server backend2.example.com:8080;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> unix:/tmp/backend3;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backup1.example.com:8080   backup;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backup2.example.com:8080   backup;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://backend;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为商业付费功能的一部分，带有周期性健康检查的动态配置组也是可用的:</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">resolver </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10.0.0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dynamic {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    zone </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">upstream_dynamic </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend1.example.com      </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">weight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    server backend2.example.com:8080 </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fail_timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> slow_start=30s;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 192.0.2.1</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                 max_fails</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    server backend3.example.com      resolve;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend4.example.com      service=http resolve;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backup1.example.com:8080  backup;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backup2.example.com:8080  backup;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://dynamic;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        health_check;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指令" tabindex="-1"><a class="header-anchor" href="#指令"><span>指令</span></a></h2><h3 id="upstream" tabindex="-1"><a class="header-anchor" href="#upstream"><span>upstream</span></a></h3><div class="hint-container tip"><p class="hint-container-title">使用说明</p><p>Syntax: <code>upstream name { ... }</code></p><p>Default: —</p><p>Context: <code>http</code></p></div><p>定义一组服务器。这些服务器可以监听不同的端口。此外，还可以混合定义监听 TCP 和 UNIX 域套接字的服务器。</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend1.example.com </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">weight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    server 127.0.0.1:8080       </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">max_fails</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fail_timeout=30s;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> unix:/tmp/backend3;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backup1.example.com backup;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认地，请求通过使用带权重的循环平衡方法分发到这些服务器上。在上面的示例里，每 7 个请求会如下分发: 5 个请求分发到<code>backend1.example.com</code>，1 个请求分发到<code>127.0.0.1:8080</code>，1 个请求分发到<code>backup1.example.com</code>。若是与一个服务器通信的过程中发生错误，请求将传递到下一个服务器上，直到所有可用的服务器都尝试过。若是没法从任意一个服务器上获得一个成功的相应，客户端将收到与最后一个服务器通信的结果。</p><h3 id="server" tabindex="-1"><a class="header-anchor" href="#server"><span>server</span></a></h3><div class="hint-container tip"><p class="hint-container-title">使用说明</p><p>Syntax: <code>server address [parameters];</code></p><p>Default: —</p><p>Context: <code>upstream</code></p></div><p>定义一个服务器的地址和其他的参数。地址可指定为域名或 IP 地址，并携带一个可选的端口；或指定为一个 UNIX 域套接字路径，路径前有<code>unix:</code>前缀。若是端口没指定，默认使用<code>80</code>端口。解析到多个 IP 地址的域名，一次定义了多个服务器。</p><p>可以定义的参数如下:</p><ul><li><code>weight=number</code><ul><li>设置服务器的权重，默认是<code>1</code>。</li></ul></li><li><code>max_conns=number</code><ul><li>限制同时连接到被代理服务器的最大活跃连接数（1.11.5）。默认值是<code>0</code>，意味着没有限制。若是服务器组没有驻留在共享内存里，则这个限制对每一个工作进程有效。</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>若是<code>idle keepalive</code>连接，多个<code>workers</code>，且共享内存启用了，则到被代理服务器的活跃及闲置的链接数可能超过<code>max_conns</code>。</p><p>在 1.5.9 版本到 1.11.5 版本，这个参数是商业付费功能的一部分。</p></div><ul><li><code>max_fails=number</code><ul><li>设置在<code>fail_timeout</code>期间内与服务器通信失败的次数，达到这个次数后，就认为服务器在之后的<code>fail_timeout</code>期间内不可用。默认的失败次数为<code>1</code>。若设置为<code>0</code>，则禁用计数。失败的含义，由<code>proxy_next_upstream</code>、<code>fastcgi_next_upstream</code>、<code>uwsgi_next_upstrea</code>、<code>scgi_next_upstream</code>、<code>memcached_next_upstream</code>、<code>grpc_next_upstream</code>等指令定义。</li></ul></li><li><code>fail_timeout=time</code><ul><li>这个参数设置了: <ul><li>在该时间范围内，与服务器通信失败指定次数后，则认为服务器不可用。</li><li>服务器被设置为不可用后持续的时间</li></ul></li><li>默认是<code>10s</code></li></ul></li><li><code>backup</code><ul><li>标记服务器作为备用服务器。当主服务器不可用时，请求将传递到该服务器上。</li></ul></li><li><code>down</code><ul><li>标记服务器永久不可用。</li></ul></li></ul><p>此外，以下参数将作为商业付费功能的一部分:</p><ul><li><code>resolve</code></li><li><code>route=string</code></li><li><code>service=name</code></li><li><code>slow_start=time</code></li><li><code>drain</code></li></ul><h3 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>hash</span></a></h3><div class="hint-container tip"><p class="hint-container-title">使用说明</p><p>Syntax: <code>hash key [consistent];</code></p><p>Default: —</p><p>Context: <code>upstream</code></p><p>该指令出现在 1.7.2 版本</p></div><p>为服务器组指定一个负载均衡的方法，客户端-服务器的转发映射将基于散列的<code>key</code>值。<code>key</code>可以包含文本、变量和它们的组合。注意，从服务器组里添加或移除一台服务器，可能会引起绝大多数的请求映射到不同的服务器上。这个方法兼容<a href="https://metacpan.org/pod/Cache::Memcached" target="_blank" rel="noopener noreferrer">Cache::Memcached</a> Perl 库。</p><p>若是指定了<code>consistent</code>参数，将使用<a href="https://www.metabrew.com/article/libketama-consistent-hashing-algo-memcached-clients" target="_blank" rel="noopener noreferrer">ketama</a>一致性散列方法代替。这个方法确保当从服务器组里添加或移除服务器时，仅有少量的请求会被重新映射到不同的服务器上。这将帮助提高缓存服务器的缓存命中率。将该<code>ketama_points</code>参数设置到<code>160</code>时，该方法兼容<a href="https://metacpan.org/pod/Cache::Memcached" target="_blank" rel="noopener noreferrer">Cache::Memcached</a> Perl 库。</p><h3 id="ip-hash" tabindex="-1"><a class="header-anchor" href="#ip-hash"><span>ip_hash</span></a></h3><div class="hint-container tip"><p class="hint-container-title">使用说明</p><p>Syntax: <code>ip_hash;</code></p><p>Default: —</p><p>Context: <code>upstream</code></p></div><p>指定这组服务器应该基于客户端 IP 地址来将请求分发到各个服务器上以起到负载均衡的效果。IPv4 地址的前三个字节，或整个 IPv6 地址，将作为散列键（<code>hashing key</code>）。这个方法保证了来自同一客户端的请求总是分发到同一台服务器上，除非服务器不可用。在服务器不可用时，请求将分发到另一台服务器上。绝大多数情况下，都是分发到同一台服务器。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>IPv6 地址从 1.3.2 和 1.2.2 版本开始支持。</p></div><p>若是某一台服务器需要被暂时移除，则它应该使用<code>down</code>参数标记，以保留当前客户端 IP 地址的散列。</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ip_hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend1.example.com;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend2.example.com;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend3.example.com down;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backend4.example.com;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>1.3.1 和 1.2.2 版本之前，使用<code>ip_hash</code>负载均衡方法时，还不能为服务器指定权重。</p></div>', 31)),
    createVNode(_component_global_config)
  ]);
}
const ngx_http_upstream_module_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "ngx_http_upstream_module.html.vue"]]);
const data = JSON.parse('{"path":"/full-stack/software/nginx/ngx_http_upstream_module.html","title":"ngx_http_upstream_module 模块","lang":"en-US","frontmatter":{"description":"ngx_http_upstream_module 模块 ngx_http_upstream_module模块用于定义一组服务器，可以被proxy_pass、fastcgi_pass、uwsgi_pass、scgi_pass、memcached_pas、grpc_pass指定引用。 配置示例 作为商业付费功能的一部分，带有周期性健康检查的动态配置组也是可...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/full-stack/software/nginx/ngx_http_upstream_module.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"ngx_http_upstream_module 模块"}],["meta",{"property":"og:description","content":"ngx_http_upstream_module 模块 ngx_http_upstream_module模块用于定义一组服务器，可以被proxy_pass、fastcgi_pass、uwsgi_pass、scgi_pass、memcached_pas、grpc_pass指定引用。 配置示例 作为商业付费功能的一部分，带有周期性健康检查的动态配置组也是可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-10T11:20:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-10T11:20:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ngx_http_upstream_module 模块\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-10T11:20:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"配置示例","slug":"配置示例","link":"#配置示例","children":[]},{"level":2,"title":"指令","slug":"指令","link":"#指令","children":[{"level":3,"title":"upstream","slug":"upstream","link":"#upstream","children":[]},{"level":3,"title":"server","slug":"server","link":"#server","children":[]},{"level":3,"title":"hash","slug":"hash","link":"#hash","children":[]},{"level":3,"title":"ip_hash","slug":"ip-hash","link":"#ip-hash","children":[]}]}],"git":{"createdTime":1557484649000,"updatedTime":1728559232000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":2}]},"readingTime":{"minutes":4.44,"words":1331},"filePathRelative":"full-stack/software/nginx/ngx_http_upstream_module.md","localizedDate":"May 10, 2019","autoDesc":true}');
export {
  ngx_http_upstream_module_html as comp,
  data
};
