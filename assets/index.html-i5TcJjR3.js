import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, a as createVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createStaticVNode('<h1 id="_4-性能管理-稳定性的保证" tabindex="-1"><a class="header-anchor" href="#_4-性能管理-稳定性的保证"><span>4. 性能管理：稳定性的保证</span></a></h1><p>性能问题是稳定性的重要威胁之一。页面加载缓慢、交互反馈慢等性能问题，会极大影响用户体验，造成用户流失。因此，性能管理也是稳定性建设的重点领域。</p><h2 id="性能指标" tabindex="-1"><a class="header-anchor" href="#性能指标"><span>性能指标</span></a></h2><p>建立完善的性能指标监控和分析体系。关注各项性能指标，包括白屏时间、首屏时间、用户可交互时间、页面完全加载时间等。根据行业标准和自身业务特点，确立性能的目标值和衡量标准。当某个性能指标达不到目标值时，及时告警并分析原因。</p><p>在前面的指标体系和全链路监控中我们有详细讲，这里就不展开了。</p><p>不过需要明确的一点是，性能指标是性能管理的开始和结束，是一个闭环，从指标开始，也从指标结束，但是过程中不要盲从于指标，需要多方面的观测及洞察，发现问题及时处理。</p><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化"><span>性能优化</span></a></h2><p>性能问题是影响用户体验和系统稳定性的重要因素，性能管理贯穿于前端应用的整个生命周期，通过性能监控、优化、回归等手段，持续保证系统的性能表现。</p><p>通过优化资源、代码、渲染、网络和交互等方面，可以有效提高应用的加载速度、响应速度和运行效率。</p><h3 id="资源优化" tabindex="-1"><a class="header-anchor" href="#资源优化"><span>资源优化</span></a></h3><h4 id="图片-视频优化" tabindex="-1"><a class="header-anchor" href="#图片-视频优化"><span>图片/视频优化</span></a></h4><ul><li>图片懒加载</li><li>图片转 Webp，选择适当的图片格式，如 WebP 或 JPEG XR，以减小文件大小。</li><li>图片 CDN 裁剪，根据实际需求调整图片尺寸，避免不必要的大图加载。</li><li>视频格式，由 MP4 转为 HLS</li></ul><h4 id="css-js-优化" tabindex="-1"><a class="header-anchor" href="#css-js-优化"><span>CSS/JS 优化</span></a></h4><p>合并和压缩 CSS/JS 文件，减少 HTTP 请求次数。使用 CDN 加速静态资源加载，并启用浏览器缓存以减少重复加载。</p><p>借助 <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener noreferrer">webpack-bundle-analyzer</a> 分析打包文件后，可以对 JS 文件做出如下优化：</p><ul><li>Code Splitting，将低频的功能抽成独立 Chunk，按需加载</li><li>Webpack CommonsChunkPlugin，比如将 Vue 生态的包（Vue、vue-router、vuex/piana）抽成一个独立的 Chunk</li><li>JS 外链引用，比如 VConsole，改成外链引用，且线上在 url 上有特殊参数时才加载</li></ul><h4 id="资源懒加载" tabindex="-1"><a class="header-anchor" href="#资源懒加载"><span>资源懒加载</span></a></h4><p>对于非首屏展示的图片、视频等资源，采用懒加载技术，在用户滚动到可见区域时才进行加载。</p><h4 id="第三方包替换" tabindex="-1"><a class="header-anchor" href="#第三方包替换"><span>第三方包替换</span></a></h4><ul><li>用<code>day.js</code>代替<code>moment.js</code>，在 Antd 项目里可以使用 <a href="https://github.com/ant-design/antd-dayjs-webpack-plugin" target="_blank" rel="noopener noreferrer">antd-dayjs-webpack-plugin</a> 来一步替换</li></ul><h4 id="webpack-插件" tabindex="-1"><a class="header-anchor" href="#webpack-插件"><span>Webpack 插件</span></a></h4><ul><li><a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener noreferrer">webpack-bundle-analyzer</a>，分析构建产物</li><li><a href="https://github.com/stephencookdev/speed-measure-webpack-plugin" target="_blank" rel="noopener noreferrer">speed-measure-webpack-plugin</a>，测量 webpack 的构建速度，给出各个插件和 loader 花费的时间</li><li><a href="https://github.com/mzgoddard/hard-source-webpack-plugin" target="_blank" rel="noopener noreferrer">hard-source-webpack-plugin</a>，缓存中间模块构建产物，提升本地构建速度</li><li><a href="https://github.com/clessg/progress-bar-webpack-plugin" target="_blank" rel="noopener noreferrer">progress-bar-webpack-plugin</a>，以进度条的形式，展示 Webpack 构建速度</li></ul><h3 id="代码优化" tabindex="-1"><a class="header-anchor" href="#代码优化"><span>代码优化</span></a></h3><ul><li><strong>减少 DOM 操作</strong>：频繁的 DOM 操作会导致页面重绘和重排，影响性能。应尽量减少 DOM 操作，或使用 DocumentFragment 等技术进行批量更新。</li><li><strong>事件委托</strong>：使用事件委托技术，将事件处理函数绑定到父元素上，减少事件监听器的创建和内存占用。</li><li><strong>节流和防抖</strong>：对于频繁触发的事件，如窗口大小变化或滚动事件，使用节流和防抖技术，减少事件处理函数的执行频率。</li></ul><h3 id="渲染优化" tabindex="-1"><a class="header-anchor" href="#渲染优化"><span>渲染优化</span></a></h3><ul><li><strong>避免布局抖动</strong>：减少布局和绘制的频率，避免频繁的样式变化和 DOM 操作。</li><li><strong>使用 CSS 动画</strong>：相比于 JavaScript 动画，CSS 动画更高效，可以减少 JavaScript 的计算和渲染压力。</li><li><strong>虚拟滚动</strong>：对于长列表或表格，使用虚拟滚动技术，只渲染可见区域的内容，提高渲染性能。</li></ul><h3 id="网络优化" tabindex="-1"><a class="header-anchor" href="#网络优化"><span>网络优化</span></a></h3><ul><li><strong>HTTP2</strong>：使用 HTTP2 协议，利用多路复用和服务器推送等特性，提高网络传输效率。</li><li><strong>开启 gzip</strong>：也可以使用 CompressionWebpackPlugin 来做 gzip，但是 CDN 上开启 gzip 更方便</li><li><strong>预加载和预渲染</strong>：对于即将访问的页面或资源，进行预加载或预渲染，减少用户等待时间。</li><li><strong>优化网络请求</strong>：减少不必要的网络请求，合并请求，使用合适的请求方法和数据格式。</li></ul><h4 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h4><ul><li>推动优化大而慢的接口</li><li>接口开启 keep-alive</li><li>域名（包括 HTML 和接口）支持 HTTP2</li><li>HTML 里预请求首屏接口</li></ul><h3 id="异步加载" tabindex="-1"><a class="header-anchor" href="#异步加载"><span>异步加载</span></a></h3><ul><li><strong>异步加载 JS/CSS</strong>：将非关键的 JS/CSS 文件设置为异步加载，避免阻塞页面渲染。</li><li><strong>代码分割</strong>：使用代码分割技术，将代码拆分为多个模块，按需加载，减少初始加载时间。</li></ul><h3 id="交互优化" tabindex="-1"><a class="header-anchor" href="#交互优化"><span>交互优化</span></a></h3><ul><li><strong>及时响应用户操作</strong>：确保用户操作得到及时的反馈，包括出错情况的处理。</li><li><strong>过渡动画平滑自然</strong>：使用平滑自然的过渡动画，提升用户体验。</li><li><strong>减少用户等待</strong>：优化加载和响应时间，减少用户等待。</li><li><strong>优化卡顿情况</strong>：确保交互响应迅速，避免卡顿，提供流畅的用户体验。</li></ul><h3 id="兼容性和健壮性" tabindex="-1"><a class="header-anchor" href="#兼容性和健壮性"><span>兼容性和健壮性</span></a></h3><ul><li><strong>兼容不同设备、系统和浏览器</strong>：确保应用在各种设备、系统和浏览器上都能正常运行。</li><li><strong>异常和错误处理</strong>：对异常和错误进行妥善处理，保证页面稳定。</li><li><strong>代码规范和质量控制</strong>：使用代码规范和质量控制流程，减少 bug，提高代码质量和可维护性。</li></ul><p>在实施性能优化时，应根据具体情况选择合适的策略，并进行充分的测试和验证，确保优化效果符合预期，同时不会引入新的性能问题或兼容性问题。</p>', 37)),
    createVNode(_component_global_config)
  ]);
}
const index_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "index.html.vue"]]);
const data = JSON.parse('{"path":"/front-end-engineering/frontend-stability-construction/performance/","title":"4. 性能管理：稳定性的保证","lang":"en-US","frontmatter":{"description":"4. 性能管理：稳定性的保证 性能问题是稳定性的重要威胁之一。页面加载缓慢、交互反馈慢等性能问题，会极大影响用户体验，造成用户流失。因此，性能管理也是稳定性建设的重点领域。 性能指标 建立完善的性能指标监控和分析体系。关注各项性能指标，包括白屏时间、首屏时间、用户可交互时间、页面完全加载时间等。根据行业标准和自身业务特点，确立性能的目标值和衡量标准。当...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/front-end-engineering/frontend-stability-construction/performance/"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"4. 性能管理：稳定性的保证"}],["meta",{"property":"og:description","content":"4. 性能管理：稳定性的保证 性能问题是稳定性的重要威胁之一。页面加载缓慢、交互反馈慢等性能问题，会极大影响用户体验，造成用户流失。因此，性能管理也是稳定性建设的重点领域。 性能指标 建立完善的性能指标监控和分析体系。关注各项性能指标，包括白屏时间、首屏时间、用户可交互时间、页面完全加载时间等。根据行业标准和自身业务特点，确立性能的目标值和衡量标准。当..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-13T04:57:19.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-13T04:57:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. 性能管理：稳定性的保证\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-13T04:57:19.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"性能指标","slug":"性能指标","link":"#性能指标","children":[]},{"level":2,"title":"性能优化","slug":"性能优化","link":"#性能优化","children":[{"level":3,"title":"资源优化","slug":"资源优化","link":"#资源优化","children":[]},{"level":3,"title":"代码优化","slug":"代码优化","link":"#代码优化","children":[]},{"level":3,"title":"渲染优化","slug":"渲染优化","link":"#渲染优化","children":[]},{"level":3,"title":"网络优化","slug":"网络优化","link":"#网络优化","children":[]},{"level":3,"title":"异步加载","slug":"异步加载","link":"#异步加载","children":[]},{"level":3,"title":"交互优化","slug":"交互优化","link":"#交互优化","children":[]},{"level":3,"title":"兼容性和健壮性","slug":"兼容性和健壮性","link":"#兼容性和健壮性","children":[]}]}],"git":{"createdTime":1728795439000,"updatedTime":1728795439000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":5.06,"words":1519},"filePathRelative":"front-end-engineering/frontend-stability-construction/performance/index.md","localizedDate":"October 13, 2024","autoDesc":true}');
export {
  index_html as comp,
  data
};
