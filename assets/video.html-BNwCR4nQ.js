import { r as resolveComponent, c as createElementBlock, d as createBaseVNode, a as createVNode, e as withCtx, b as createStaticVNode, o as openBlock, f as createTextVNode } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
const _hoisted_1 = { class: "table-of-contents" };
function _sfc_render(_ctx, _cache) {
  const _component_router_link = resolveComponent("router-link");
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[5] || (_cache[5] = createBaseVNode("h1", {
      id: "video-兼容性",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#video-兼容性"
      }, [
        createBaseVNode("span", null, "video 兼容性")
      ])
    ], -1)),
    createBaseVNode("nav", _hoisted_1, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#属性" }, {
            default: withCtx(() => _cache[0] || (_cache[0] = [
              createTextVNode("属性")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#事件" }, {
            default: withCtx(() => _cache[1] || (_cache[1] = [
              createTextVNode("事件")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#查询视频的缓冲时间" }, {
                default: withCtx(() => _cache[2] || (_cache[2] = [
                  createTextVNode("查询视频的缓冲时间")
                ])),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#兼容性问题汇总" }, {
            default: withCtx(() => _cache[3] || (_cache[3] = [
              createTextVNode("兼容性问题汇总")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#参考链接" }, {
            default: withCtx(() => _cache[4] || (_cache[4] = [
              createTextVNode("参考链接")
            ])),
            _: 1
          })
        ])
      ])
    ]),
    _cache[6] || (_cache[6] = createStaticVNode('<h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h2><p>更多详情请见<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video" target="_blank" rel="noopener noreferrer">MDN - video 元素</a></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video.mp4&quot;</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  muted</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  controls</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  autoplay</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  poster</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;images.jpg&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> /*视频封面*/</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  preload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;auto&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  webkit-playsinline</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  playsinline</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  x-webkit-airplay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;allow&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  x5-video-player-type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;h5&quot;</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  x5-video-orientation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;portraint&quot;</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  x5-video-player-fullscreen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;true&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">object-fit:fill</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>src</code>：视频的地址</li><li><code>muted</code>：布尔特性，设置该属性，则视频的音频输出会被静音</li><li><code>controls</code>：布尔特性，加上这个属性，Gecko 会提供用户控制，允许用户控制视频的播放，包括音量，跨帧，暂停/恢复播放</li><li><code>autoplay</code>：布尔特性，视频自动播放</li><li><code>poster</code>：属性规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。如果未设置该属性，则使用视频的第一帧来代替。</li><li><code>preload</code>：该属性规定在页面加载后载入视频。如果设置了<code>autoplay</code>属性，则忽略该属性。可选的值有： <ul><li>auto：当页面加载后载入整个视频</li><li>meta：当页面加载后只载入元数据</li><li>none：当页面加载后不载入视频</li></ul></li><li><code>playsinline</code>/<code>webkit-playsinline</code>：布尔特性，iOS only <ul><li>设置该属性，可以让视频在<code>video</code>元素所在区域内播放，而不是全屏播放。</li><li>若不设置该属性，iOS 上会弹出全屏播放，并携带播放控件（可以播放、暂停、快进、快退、拖动播放进度等，效果图可参见引用里的第一篇文章）</li><li>该属性较为特别，需要嵌入网页的APP 比如 WeChat 中的 UIwebview 的<code>allowsInlineMediaPlayback</code> = YES，才能生效；如果 APP 的 UIwebview 不设置，即使在页面里的<code>video</code>标签加了该特性也无效。</li><li>该特性仅对 iOS 有效，iOS 10 之前需要使用带前缀的版本<code>webkit-playsinline</code>，iOS 10 之后可以去掉前缀，直接使用<code>playsinline</code>，为了兼容新老版本，一般这两个都会使用（<a href="https://webkit.org/blog/6784/new-video-policies-for-ios/" target="_blank" rel="noopener noreferrer">New video Policies for iOS</a>）</li></ul></li><li><code>x5-video-player-type</code>：WeChat 安卓版特有的属性 <ul><li>特性值为&quot;h5&quot;，意为开启 H5 同层播放，就是在视频全屏的时候，<code>div</code>等元素可以呈现在视频层上。同层播放别名也叫做沉浸式播放，播放的时候看似全屏，但是已经除去了<code>control</code>和微信的导航栏，只留下<code>X</code>和<code>&lt;</code>两键。目前的同层播放器只在 Android（包括微信）上生效，暂时不支持 iOS。</li><li>背景：以前播放视频，<code>video</code>元素是顶层的，任何元素不能悬浮于<code>video</code>元素之上</li><li>笔者想过为什么同层播放只对安卓开放，因为安卓不能像ISO一样局域播放，默认的全屏会使得一些界面操作被阻拦，如果是全屏H5还好，但是做直播的话，诸如弹幕那样的功能就无法实现了，所以这时候同层播放的概念就解决了这个问题。不过笔者在测试的过程中发现，不同版本的ISO和安卓效果略有不同。</li></ul></li><li><code>x5-video-player-fullscreen</code>： <ul><li>视频播放时将会进入到全屏模式，如果不申明此属性，页面得到视口区域为原始视口大小(视频未播放前)，比如在微信里，会有一个常驻的标题栏，如果不声明此属性，这个标题栏高度不会给页面，播放时会平均分为两块（上下黑块）</li><li>注： 声明此属性，需要页面自己重新适配新的视口大小变化。可以通过监听resize 事件来实现</li></ul></li></ul><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test_video&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;xxx&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> x5-video-player-type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;h5&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> x5-video-player-fullscreen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> /</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onresize</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  test_video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">width</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">innerWidth</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;px&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  test_video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">height</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">innerHeight</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;px&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>x5-video-orientation</code>： <ul><li>声明播放器支持的方向，可选值<code>landscape</code>横屏,<code>portraint</code>竖屏。默认值<code>portraint</code></li><li>无论是直播还是全屏H5一般都是竖屏播放，但是这个属性需要x5-video-player-type开启 H5 模式</li></ul></li></ul><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><p>详细的事件列表可参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Events/Media_events" target="_blank" rel="noopener noreferrer">MDN - 媒体相关事件</a>。</p><p>主要注意的是，按照参考链接<a href="https://github.com/gnipbao/iblog/issues/11" target="_blank" rel="noopener noreferrer">视频H5 video最佳实践 #11</a>里说的，在移动端除了<code>ended</code>、<code>timeupdate</code>、<code>event</code>事件之外，不要轻易使用媒体元素的其他事件。</p><h3 id="查询视频的缓冲时间" tabindex="-1"><a class="header-anchor" href="#查询视频的缓冲时间"><span>查询视频的缓冲时间</span></a></h3><p>有时候会遇到对<code>video</code>添加了<code>autoplay</code>但是无法自动播放的情况，这时候可以查看下<code>video</code>的缓冲时间是否足够播放，可使用<code>video</code>的<code>buffered</code>属性查看，详情可参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Audio_and_video_delivery/buffering_seeking_time_ranges" target="_blank" rel="noopener noreferrer">Media buffering, seeking, and time ranges</a>。</p><h2 id="兼容性问题汇总" tabindex="-1"><a class="header-anchor" href="#兼容性问题汇总"><span>兼容性问题汇总</span></a></h2><ul><li>华为/Vivo 等系统浏览器 <ul><li>当<code>video</code>元素设置了<code>object-fit: cover</code>后，在<code>video</code>所在区域内播放时，视频会位于最顶层，覆盖其他所有东西。</li><li>当<code>video</code>元素滚动到屏幕上方时，<code>video</code>宽度会变成屏幕宽度</li><li>播放控件无法隐藏</li></ul></li><li>Android 微信里不能监听<code>ended</code>事件后调用<code>video.play()</code>进行循环播放，需要给<code>video</code>元素添加<code>loop</code>属性</li></ul><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video" target="_blank" rel="noopener noreferrer">MDN - video 元素</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Events/Media_events" target="_blank" rel="noopener noreferrer">MDN - 媒体相关事件</a></li><li><a href="https://github.com/gnipbao/iblog/issues/11" target="_blank" rel="noopener noreferrer">视频H5 video最佳实践 #11</a></li><li><a href="https://aotu.io/notes/2017/01/11/mobile-video/" target="_blank" rel="noopener noreferrer">视频H5のVideo标签在微信里的坑和技巧</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Audio_and_video_delivery/buffering_seeking_time_ranges" target="_blank" rel="noopener noreferrer">Media buffering, seeking, and time ranges</a></li></ul>', 16)),
    createVNode(_component_global_config)
  ]);
}
const video_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "video.html.vue"]]);
const data = JSON.parse('{"path":"/browser-env/compatibility/video.html","title":"video 兼容性","lang":"en-US","frontmatter":{"description":"video 兼容性 属性 更多详情请见MDN - video 元素 src：视频的地址 muted：布尔特性，设置该属性，则视频的音频输出会被静音 controls：布尔特性，加上这个属性，Gecko 会提供用户控制，允许用户控制视频的播放，包括音量，跨帧，暂停/恢复播放 autoplay：布尔特性，视频自动播放 poster：属性规定视频下载时显示的...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/browser-env/compatibility/video.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"video 兼容性"}],["meta",{"property":"og:description","content":"video 兼容性 属性 更多详情请见MDN - video 元素 src：视频的地址 muted：布尔特性，设置该属性，则视频的音频输出会被静音 controls：布尔特性，加上这个属性，Gecko 会提供用户控制，允许用户控制视频的播放，包括音量，跨帧，暂停/恢复播放 autoplay：布尔特性，视频自动播放 poster：属性规定视频下载时显示的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2021-06-14T10:58:48.000Z"}],["meta",{"property":"article:modified_time","content":"2021-06-14T10:58:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"video 兼容性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-06-14T10:58:48.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[{"level":3,"title":"查询视频的缓冲时间","slug":"查询视频的缓冲时间","link":"#查询视频的缓冲时间","children":[]}]},{"level":2,"title":"兼容性问题汇总","slug":"兼容性问题汇总","link":"#兼容性问题汇总","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1535107330000,"updatedTime":1623668328000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":4.36,"words":1307},"filePathRelative":"browser-env/compatibility/video.md","localizedDate":"August 24, 2018","autoDesc":true}');
export {
  video_html as comp,
  data
};
