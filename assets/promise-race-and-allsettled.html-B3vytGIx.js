import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, a as createVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createStaticVNode('<h1 id="【高级】实现-promise-race-allsettled-方法的-polyfill" tabindex="-1"><a class="header-anchor" href="#【高级】实现-promise-race-allsettled-方法的-polyfill"><span>【高级】实现 Promise.race/allSettled 方法的 polyfill</span></a></h1><p>参考：<a href="https://blog.windstone.cc/es6/polyfill/promise/promise-race.html" target="_blank" rel="noopener noreferrer">风动之石的博客 - Promise.race</a></p><p>减分项：</p><ul><li>把构造函数方法当作实例方法对待</li><li>未考虑到异步情况</li></ul><p>加分项：</p><ul><li>考虑到传入对象是非Promise，对每一项遍历增加Promise.resolve包裹</li></ul><p>参考：<a href="https://blog.windstone.cc/es6/polyfill/promise/promise-allSettled.html" target="_blank" rel="noopener noreferrer">风动之石的博客 - Promise.allSettled</a></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Promise.allSetted 说明</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">输入：</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  promise1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  promise2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">  ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  promise10</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">每一个 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 都确定状态，无论 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">resolved</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">rejected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，返回一个结果的数组。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">输出：</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // promise1: resolved</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    status</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;fulfilled&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // promise2: rejected</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    status</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;rejected&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    reason</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">  ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">注意：返回数组与输入数组要保持一致的顺序</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【高级】实现-string-prototype-padstart-方法的-polyfill" tabindex="-1"><a class="header-anchor" href="#【高级】实现-string-prototype-padstart-方法的-polyfill"><span>【高级】实现 String.prototype.padStart 方法的 polyfill</span></a></h2><p>参考：<a href="https://blog.windstone.cc/es6/polyfill/string/padStart.html" target="_blank" rel="noopener noreferrer">风动之石的博客 - String.prototype.padStart</a></p>', 10)),
    createVNode(_component_global_config)
  ]);
}
const promiseRaceAndAllsettled_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "promise-race-and-allsettled.html.vue"]]);
const data = JSON.parse('{"path":"/interview/javascript/coding/basic-api-usage/polyfill/promise-race-and-allsettled.html","title":"【高级】实现 Promise.race/allSettled 方法的 polyfill","lang":"en-US","frontmatter":{"description":"【高级】实现 Promise.race/allSettled 方法的 polyfill 参考：风动之石的博客 - Promise.race 减分项： 把构造函数方法当作实例方法对待 未考虑到异步情况 加分项： 考虑到传入对象是非Promise，对每一项遍历增加Promise.resolve包裹 参考：风动之石的博客 - Promise.allSettl...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/interview/javascript/coding/basic-api-usage/polyfill/promise-race-and-allsettled.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"【高级】实现 Promise.race/allSettled 方法的 polyfill"}],["meta",{"property":"og:description","content":"【高级】实现 Promise.race/allSettled 方法的 polyfill 参考：风动之石的博客 - Promise.race 减分项： 把构造函数方法当作实例方法对待 未考虑到异步情况 加分项： 考虑到传入对象是非Promise，对每一项遍历增加Promise.resolve包裹 参考：风动之石的博客 - Promise.allSettl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-14T00:59:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T00:59:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【高级】实现 Promise.race/allSettled 方法的 polyfill\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-14T00:59:41.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"【高级】实现 String.prototype.padStart 方法的 polyfill","slug":"【高级】实现-string-prototype-padstart-方法的-polyfill","link":"#【高级】实现-string-prototype-padstart-方法的-polyfill","children":[]}],"git":{"createdTime":1713056381000,"updatedTime":1713056381000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":0.58,"words":175},"filePathRelative":"interview/javascript/coding/basic-api-usage/polyfill/promise-race-and-allsettled.md","localizedDate":"April 14, 2024","autoDesc":true}');
export {
  promiseRaceAndAllsettled_html as comp,
  data
};
