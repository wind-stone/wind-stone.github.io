import { r as resolveComponent, c as createElementBlock, d as createBaseVNode, a as createVNode, e as withCtx, b as createStaticVNode, o as openBlock, f as createTextVNode } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _imports_0 = "/assets/chrome-resource-priorities-DW04Ozti.png";
const _imports_1 = "/assets/blink-priority-to-net-priority-DjA5LFb0.jpg";
const _imports_2 = "/assets/request-priority-result-CtRL4LVN.jpg";
const _imports_3 = "/assets/should-start-request-log-Csmi9Zrj.jpg";
const _sfc_main = {};
const _hoisted_1 = { class: "table-of-contents" };
function _sfc_render(_ctx, _cache) {
  const _component_router_link = resolveComponent("router-link");
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[20] || (_cache[20] = createBaseVNode("h1", {
      id: "浏览器里的资源请求",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#浏览器里的资源请求"
      }, [
        createBaseVNode("span", null, "浏览器里的资源请求")
      ])
    ], -1)),
    createBaseVNode("nav", _hoisted_1, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#资源分类" }, {
            default: withCtx(() => _cache[0] || (_cache[0] = [
              createTextVNode("资源分类")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#资源请求" }, {
            default: withCtx(() => _cache[1] || (_cache[1] = [
              createTextVNode("资源请求")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#预处理请求" }, {
                default: withCtx(() => _cache[2] || (_cache[2] = [
                  createTextVNode("预处理请求")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#资源排队的原因" }, {
                default: withCtx(() => _cache[3] || (_cache[3] = [
                  createTextVNode("资源排队的原因")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#资源请求优先级" }, {
                default: withCtx(() => _cache[4] || (_cache[4] = [
                  createTextVNode("资源请求优先级")
                ])),
                _: 1
              }),
              createBaseVNode("ul", null, [
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#最终的优先级" }, {
                    default: withCtx(() => _cache[5] || (_cache[5] = [
                      createTextVNode("最终的优先级")
                    ])),
                    _: 1
                  }),
                  createBaseVNode("ul", null, [
                    createBaseVNode("li", null, [
                      createVNode(_component_router_link, { to: "#script-优先级" }, {
                        default: withCtx(() => _cache[6] || (_cache[6] = [
                          createTextVNode("script 优先级")
                        ])),
                        _: 1
                      })
                    ]),
                    createBaseVNode("li", null, [
                      createVNode(_component_router_link, { to: "#image-优先级" }, {
                        default: withCtx(() => _cache[7] || (_cache[7] = [
                          createTextVNode("image 优先级")
                        ])),
                        _: 1
                      })
                    ]),
                    createBaseVNode("li", null, [
                      createVNode(_component_router_link, { to: "#preload-as" }, {
                        default: withCtx(() => _cache[8] || (_cache[8] = [
                          createTextVNode("preload & as")
                        ])),
                        _: 1
                      })
                    ])
                  ])
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#计算资源加载优先级" }, {
                    default: withCtx(() => _cache[9] || (_cache[9] = [
                      createTextVNode("计算资源加载优先级")
                    ])),
                    _: 1
                  }),
                  createBaseVNode("ul", null, [
                    createBaseVNode("li", null, [
                      createVNode(_component_router_link, { to: "#资源的默认优先级" }, {
                        default: withCtx(() => _cache[10] || (_cache[10] = [
                          createTextVNode("资源的默认优先级")
                        ])),
                        _: 1
                      })
                    ]),
                    createBaseVNode("li", null, [
                      createVNode(_component_router_link, { to: "#优先级调整" }, {
                        default: withCtx(() => _cache[11] || (_cache[11] = [
                          createTextVNode("优先级调整")
                        ])),
                        _: 1
                      })
                    ])
                  ])
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#转换成-net-的优先级" }, {
                    default: withCtx(() => _cache[12] || (_cache[12] = [
                      createTextVNode("转换成 Net 的优先级")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#资源加载" }, {
                    default: withCtx(() => _cache[13] || (_cache[13] = [
                      createTextVNode("资源加载")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#示例" }, {
                    default: withCtx(() => _cache[14] || (_cache[14] = [
                      createTextVNode("示例")
                    ])),
                    _: 1
                  })
                ])
              ])
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#preload、prefetch" }, {
                default: withCtx(() => _cache[15] || (_cache[15] = [
                  createTextVNode("preload、prefetch")
                ])),
                _: 1
              }),
              createBaseVNode("ul", null, [
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#preload" }, {
                    default: withCtx(() => _cache[16] || (_cache[16] = [
                      createTextVNode("preload")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#prefetch" }, {
                    default: withCtx(() => _cache[17] || (_cache[17] = [
                      createTextVNode("prefetch")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#对比" }, {
                    default: withCtx(() => _cache[18] || (_cache[18] = [
                      createTextVNode("对比")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#应用" }, {
                    default: withCtx(() => _cache[19] || (_cache[19] = [
                      createTextVNode("应用")
                    ])),
                    _: 1
                  })
                ])
              ])
            ])
          ])
        ])
      ])
    ]),
    _cache[21] || (_cache[21] = createStaticVNode('<p>以下内容如无特殊说明，都是基于 Chrome 浏览器。</p><ul><li><a href="https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf" target="_blank" rel="noopener noreferrer">Preload, Prefetch And Priorities in Chrome</a></li><li><a href="https://docs.google.com/document/d/1bCDuq9H1ih9iNjgzyAL0gpwNFiEP4TZS-YLRp_RuMlc/edit" target="_blank" rel="noopener noreferrer">Resource Fetch Prioritization and Scheduling in Chromium</a></li><li><a href="https://juejin.im/post/5a4ed917f265da3e317df515" target="_blank" rel="noopener noreferrer">掘金 - 浏览器页面资源加载过程与优化</a></li><li><a href="https://zhuanlan.zhihu.com/p/30558018" target="_blank" rel="noopener noreferrer">知乎 - 从Chrome源码看浏览器如何加载资源</a></li></ul><h2 id="资源分类" tabindex="-1"><a class="header-anchor" href="#资源分类"><span>资源分类</span></a></h2><p>Chrome 浏览器里会将资源分为 14 类，如下表所示。</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>kMainResource</td><td>主资源，比如导航栏输入地址、<code>frame</code>/<code>iframe</code>里请求、超链接点击、表达提交等得到的 HTML 页面文件资源</td></tr><tr><td>kImage</td><td>图片资源</td></tr><tr><td>kCSSStyleSheet</td><td>CSS 层叠样式表资源</td></tr><tr><td>kScript</td><td>脚本资源，例如 JavaScript 资源</td></tr><tr><td>kFont</td><td>字体资源，例如网页中常用的字体集<code>.woff</code>资源</td></tr><tr><td>kRaw</td><td>混合类型资源，比如 Ajax 请求（因为 Ajax 可以请求多种资源）</td></tr><tr><td>kSVGDocument</td><td>SVG 可缩放矢量图形文件资源</td></tr><tr><td>kXSLStyleSheet</td><td>扩展样式表语言 XSLT，是一种转换语言，关于该类型可以查阅 W3C XSL来了解</td></tr><tr><td>kLinkPrefetch</td><td>HTML5 页面的预读取资源(Link prefetch)，例如<code>dns-prefetch</code>。</td></tr><tr><td>kTextTrack</td><td><code>&lt;video&gt;</code>的字幕资源，<code>.vtt</code>格式，在<code>&lt;track&gt;</code>标签里使用</td></tr><tr><td>kImportResource</td><td>HTML Imports，将一个 HTML 文件导入到其他 HTML 文档中，例如<code>&lt;link href=&quot;import/post.html&quot; rel=&quot;import&quot; /&gt;</code>。详细了解请查阅相关文档。</td></tr><tr><td>kMedia</td><td>多媒体资源，比如<code>video</code>和<code>audio</code>都属于该类资源</td></tr><tr><td>kManifest</td><td>HTML5 应用程序缓存资源</td></tr><tr><td>kMock</td><td>预留的测试类型</td></tr></tbody></table><h2 id="资源请求" tabindex="-1"><a class="header-anchor" href="#资源请求"><span>资源请求</span></a></h2><h3 id="预处理请求" tabindex="-1"><a class="header-anchor" href="#预处理请求"><span>预处理请求</span></a></h3><p>浏览器在对资源开始请求之前，需要先对请求做预处理。预处理主要做两件事情: 检查请求是否合法和更改请求。</p><ul><li><strong>CSP检查</strong></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener noreferrer">CSP（Content Security Policy）</a>通过指定有效域（即浏览器认可的资源的有效来源），来减少和报告 XSS 攻击。浏览器会检查<code>&lt;meta&gt;</code>标签里或 HTTP 响应头里的<code>Content-Security-Policy</code>设置的策略，当该类资源不符合 CSP 的设置时，浏览器将报错，并阻止资源请求。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Content-Security-Policy&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;img-src &#39;self&#39;;...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>upgrade-insecure-requests</strong></li></ul><p>若设置了如下的 CSP 策略:</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Content-Security-Policy&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;upgrade-insecure-requests&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>则浏览器会将页面里的<code>http</code>请求强制升级为<code>https</code>，包括改变<code>url</code>的协议和端口号。</p><ul><li><strong>Mixed Content 检查</strong></li></ul><p>Mixed Content 是指在<code>https</code>的页面里请求<code>http</code>的内容，通常这种<code>http</code>的 JavaScript 文件请求会被浏览器阻止，以防止受到中间人的攻击导致整个页面被控制。但是图片之类的资源即使内容被修改可能只是展示出问题，不会影响整个页面，因此不会被浏览器阻止。</p><p>被动混合内容: 那些不会打破页面重要部分，风险比较低的，但是使用频率又比较高的 Mixed Content 内容。--<a href="https://w3c.github.io/webappsec-mixed-content/#category-optionally-blockable" target="_blank" rel="noopener noreferrer">W3C - Optionally-blockable Content</a></p><p>翻看 Chromium 64 的源码可以发现，有如下四类资源属于被动混合内容。</p><ul><li>audio</li><li>favicon</li><li>image</li><li>video</li></ul><p>其他的几乎资源都是<code>blockable</code>，即浏览器会阻止请求的资源。</p><ul><li><strong>Origin Block 检查</strong></li></ul><p><code>svg</code>使用<code>use</code>获取 SVG 资源时必须不能跨域，否则将会被浏览器阻止并报错。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">svg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">use</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://windstone.cc/images/logo.svg#abc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">svg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码里会检查这种请求是否同源，包括协议、域名、端口号。注意这里的同源与同源策略不同，若不是同源的话，就会连请求都发不出去，而同源策略可以发出请求但是阻止请求的返回结果。</p><h3 id="资源排队的原因" tabindex="-1"><a class="header-anchor" href="#资源排队的原因"><span>资源排队的原因</span></a></h3><p>页面里发出资源请求后，可能不会立马进行加载资源，而是会进入请求队列，其原因可能有</p><ul><li>根据资源请求的优先级，判断出该请求具有较低的优先级</li><li>该域名下已经打开了 6 个 TCP 链接。（仅适用于 HTTP/1.0 和 1.1）</li><li>浏览器分配磁盘空间</li></ul><p>详见<a href="https://developers.google.com/web/tools/chrome-devtools/network/reference#timing-explanation" target="_blank" rel="noopener noreferrer">https://developers.google.com/web/tools/chrome-devtools/network/reference#timing-explanation</a></p><h3 id="资源请求优先级" tabindex="-1"><a class="header-anchor" href="#资源请求优先级"><span>资源请求优先级</span></a></h3><h4 id="最终的优先级" tabindex="-1"><a class="header-anchor" href="#最终的优先级"><span>最终的优先级</span></a></h4><figure><img src="' + _imports_0 + '" alt="Chrome 资源请求优先级" tabindex="0" loading="lazy"><figcaption>Chrome 资源请求优先级</figcaption></figure><p>注释:</p><ul><li><code>*</code> Preload using “as” or fetch using “type” use the priority of the type they are requesting. (e.g. preload as=stylesheet will use Highest priority). With no “as” they will behave like an XHR.</li><li><code>**</code> “Early” is defined as being requested before any non-preloaded images have been requested (“late” is after).</li></ul><p>自 2016 年 6 月起，以上表格表示了 Chrome 里（in Blink as of Chrome 46 and beyond）处理所有资源的优先级。</p><p>资源的优先级划分为 5 级。不同场景下，这 5 级的命名和描述上可能有所不同，但本质上是一一对应的。比如:</p><ul><li>网络优先级: Highest、Medium、Low、Lowest、Idle</li><li>浏览器内核: VeryHigh、High、Medium、Low、VeryLow</li><li>用户端控制台显示: Highest、High、Medium、Low、Lowest</li></ul><p>是不是跟星巴克咖啡的中杯、大杯、超大杯类似？</p><h5 id="script-优先级" tabindex="-1"><a class="header-anchor" href="#script-优先级"><span>script 优先级</span></a></h5><p><code>script</code>脚本的优先级取决于它们在文档里的位置以及它们是否是<code>async</code>异步的、<code>defer</code>延迟的或<code>blocking</code>阻塞的。</p><ul><li>位于第一个图片之前被请求的<code>blocking</code>脚本的优先级是: Net:Medium</li><li>位于第一个图片之后被请求的<code>blocking</code>脚本的优先级是: Net:Low</li><li><code>async</code>/<code>defer</code>/<code>injected</code>脚本的优先级是: Net:Lowest</li></ul><p>这里的<code>第一个图片</code>的定义是，在任何非<code>proload</code>的图片被请求之前的第一个被请求的图片。</p><h5 id="image-优先级" tabindex="-1"><a class="header-anchor" href="#image-优先级"><span>image 优先级</span></a></h5><p>可见且位于视口内的<code>image</code>图片（Net:Medium）比那些不在视口内的图片（Net:Lowest）具有更高的优先级，因此在某些程度上 Chrome 会尽量为你（伪）懒加载这些图片。一开始具有低优先级的图片（Net:Lowest）在布局完成之后被发现位于视口内时，将获得优先级提升（Net:Medium）。但是当布局完成时已经在请求中的图片不会重新更改优先级。</p><h5 id="preload-as" tabindex="-1"><a class="header-anchor" href="#preload-as"><span>preload &amp; as</span></a></h5><p><code>preload</code>且使用<code>as</code>属性的资源，将获得与该资源类型相同的资源优先级。比如，<code>&lt;link rel=&quot;preload&quot; as=&quot;style&quot;&gt;</code>将和样式表一样获得 Net:Highest 的优先级；<code>&lt;link rel=&quot;preload&quot; as=&quot;script&quot;&gt;</code>将获得 Net:Medium/Low 的优先级。这些资源仍然遵从着相同的 CSP 政策。</p><p><code>preload</code>且没有使用<code>as</code>属性的资源的请求优先级与异步 XHR 的优先级一致。</p><h4 id="计算资源加载优先级" tabindex="-1"><a class="header-anchor" href="#计算资源加载优先级"><span>计算资源加载优先级</span></a></h4><p>上一节尽管已经给出了最终的资源加载优先级，但是这些优先级是如何一步步计算得到的呢？</p><h5 id="资源的默认优先级" tabindex="-1"><a class="header-anchor" href="#资源的默认优先级"><span>资源的默认优先级</span></a></h5><p>首先，每一类资源都有个默认的优先级，这个默认的优先级将作为初始化的优先级。</p><p>源码里，不同类型的资源优先级是这么定义的:</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ResourceLoadPriority</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TypeToPriority</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Resource::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (type) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kMainResource:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kCSSStyleSheet:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kFont:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // Also parser-blocking scripts (set explicitly in loadPriority)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> kResourceLoadPriorityVeryHigh;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kXSLStyleSheet:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      DCHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">RuntimeEnabledFeatures</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">XSLTEnabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kRaw:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kImportResource:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kScript:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // Also visible resources/images (set explicitly in loadPriority)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> kResourceLoadPriorityHigh;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kManifest:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kMock:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // Also late-body scripts discovered by the preload scanner (set</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // explicitly in loadPriority)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> kResourceLoadPriorityMedium;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kImage:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kTextTrack:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kMedia:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kSVGDocument:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // Also async scripts (set explicitly in loadPriority)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> kResourceLoadPriorityLow;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Resource::kLinkPrefetch:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> kResourceLoadPriorityVeryLow;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> kResourceLoadPriorityUnresolved;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，从浏览器内核 Blink 层面来看，优先级总共分为五级: VeryHigh、High、Medium、Low、VeryLow。其中，MainRescource、CSS、字体的优先级是最高的 VeryHigh；其次，Ajax、Script 这类的优先级是 High；图片、音视频的优先级是 Low；最后<code>prefetch</code>预加载的资源的优先级是最低的 VeryLow。</p><p>注意上面的<code>switch-case</code>设定资源优先级有一个顺序，若资源既是<code>script</code>又是<code>prefetch</code>的话得到的优化级是 High，而不是<code>prefetch</code>的 VeryLow，因为<code>prefetch</code>是最后一个判断。所以在设定了资源默认的优先级之后，会再对一些情况做一些调整，主要是对<code>prefetch</code>/<code>preload</code>的资源。</p><h5 id="优先级调整" tabindex="-1"><a class="header-anchor" href="#优先级调整"><span>优先级调整</span></a></h5><ul><li><strong>降低<code>preload</code>的字体的优先级</strong></li></ul><p>若字体是<code>preload</code>的，则浏览器会将<code>preload</code>的字体的优先级从默认的 VeryHigh 调整为 High。</p><ul><li><strong>降低<code>defer</code>/<code>async</code>的<code>script</code>的优先级</strong></li></ul><p>若<code>script</code>是<code>defer</code>或<code>async</code>的，则将该<code>script</code>的优先级从默认的 High 调整为 Low。</p><ul><li><strong>页面底部<code>preload</code>的<code>script</code>优先级变成 Medium</strong></li></ul><p>紧接着上一条，若<code>script</code>不是<code>defer</code>或<code>async</code>的，且是<code>preload</code>的<code>script</code>，并且如果页面之前已经加载了一张图片就认为这个<code>script</code>是在页面偏底部的位置，就把它的优先级调成 Medium。资源在第一张非<code>preload</code>的图片前认为是<code>early</code>，而在其后则认为是<code>late</code>，<code>late</code>的<code>script</code>的优先级会偏低。</p><p><code>preload</code>不同于<code>prefetch</code>，在早期浏览器，<code>script</code>资源是阻塞加载的，当页面遇到一个<code>script</code>，那么要等这个<code>script</code>下载和执行完了，才会继续解析剩下的 DOM 结构，也就是说<code>script</code>是串行加载的，并且会堵塞页面其它资源的加载，这样会导致页面整体的加载速度很慢，所以早在 2008 年的时候浏览器出了一个推测加载(speculative preload)策略，即遇到<code>script</code>的时候，DOM 会停止构建，但是会继续去搜索页面需要加载的资源，如看下后续的 HTML 有没有<code>img</code>/<code>script</code>标签，先进行预加载，而不用等到构建 DOM 的时候才去加载。这样大大提高了页面整体的加载速度。</p><p>TODO: 这里的<code>preload</code>是指推测加载，跟<code>&lt;link rel=&quot;preload&quot;&gt;</code>貌似不一样？</p><ul><li><strong>把同步即阻塞加载的资源的优先级调成最高</strong></li></ul><p>若是同步加载的资源，那么它的 ResourceRequest 对象里面的优先最级是最高的，所以本来是 High 的 Ajax 同步请求在最后调整为了 VeryHigh。</p><p>经过这一步的处理，资源最终的优先级是取了两个值的最大值，第一个值是上面进行各种判断得到的优先级，第二个在初始这个 ResourceRequest 对象本身就有的一个优先级属性，返回最大值后再重新设置资源的优先级。</p><p>在构建 ResourceRequest 对象时所有资源的优先级都是最低的 VeryLow，但是同步请求在初始化时优先级会设置为最高的 VeryHigh。</p><h4 id="转换成-net-的优先级" tabindex="-1"><a class="header-anchor" href="#转换成-net-的优先级"><span>转换成 Net 的优先级</span></a></h4><p>上一节<code>计算资源加载优先级</code>里提到的优先级都是浏览器内核 Blink 层面的优先级，而这些资源的优先级在发送请求之前会被转换为网络层面的 Net 优先级。二者的对应关系如下:</p><figure><img src="' + _imports_1 + '" alt="优先级转换" tabindex="0" loading="lazy"><figcaption>优先级转换</figcaption></figure><p>Net Priority 是请求资源的时候使用的，这个是在 Chrome 的网络进程里面进行的。</p><h4 id="资源加载" tabindex="-1"><a class="header-anchor" href="#资源加载"><span>资源加载</span></a></h4><p>资源加载的优先级已经确定，那么网络进程是如何根据优先级触发加载资源呢？</p><p>网络进程里有个函数<code>ShouldStartRequest</code>会判断当前资源是否可以加载，若能则准备加载，否则就继续把它放到<code>pending_requests</code>队列里面。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ScheduleRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> net::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">URLRequest</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> url_request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                       ScheduledResourceRequest</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  SetRequestAttributes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DetermineRequestAttributes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ShouldStartReqResult should_start </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ShouldStartRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (should_start </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> START_REQUEST) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // New requests can be started synchronously without issue.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    StartRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, START_SYNC, RequestStartTrigger::NONE);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    pending_requests_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网络进程一但收到页面渲染进程的加载资源消息，调用<code>ScheduleRequest</code>函数，进而调用<code>ShouldStartRequest</code>判断资源是加载还是放到<code>pending_requests</code>队列。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LoadAnyStartablePendingRequests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RequestStartTrigger</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> trigger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // We iterate through all the pending requests, starting with the highest</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // priority one.</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  RequestQueue::NetQueue::iterator request_iter </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      pending_requests_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetNextHighestIterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (request_iter </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> pending_requests_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">End</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ScheduledResourceRequest</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> request </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">request_iter;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ShouldStartReqResult query_result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ShouldStartRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (query_result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> START_REQUEST) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      pending_requests_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Erase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      StartRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, START_ASYNC, trigger);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了收到渲染进程的消息之外，还会在<code>LoadAnyStartablePendingRequests</code>函数里调用<code>ShouldStartRequest</code>函数。<code>LoadAnyStartablePendingRequests</code>函数里会遍历<code>pending_requests</code>，获取到优先级最高的请求对象，调用<code>ShouldStartRequest</code>判断该请求是否可以加载。若能的话，将该请求从<code>pending_requests</code>队列里删除，并开始加载资源。而<code>LoadAnyStartablePendingRequests</code>函数会在三个地方被调用，一个是 IO 进程的循环判断，只要还有未完成的任务，就会触发加载；第二个是当有请求完成时会调；第三个是要插入<code>body</code>标签的时候。</p><p>所以主要总共有三个地方会触发加载:</p><ul><li>收到来自渲染进程 IPC 的请求加载资源的消息</li><li>每个请求完成之后，触发加载<code>pending_requests</code>里的请求</li><li>网络进程定时循环未完成的任务，触发加载</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DOCType</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> charset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;icon&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;4.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;4.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;5.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;6.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;hello&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;4.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;5.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;6.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;8.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;9.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> xhr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> XMLHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://baidu.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hi&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;9.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上面的 HTML 为例研究优先加载的过程。把 Chrome 的网络速度调为 Fast 3G，让加载速度降低，以便更好地观察这个过程，结果如下图所示：</p><figure><img src="' + _imports_2 + '" alt="Demo 加载结果" tabindex="0" loading="lazy"><figcaption>Demo 加载结果</figcaption></figure><p>从上图可以发现以下特点：</p><ul><li>每个域每次最多同时加载 6 个资源（仅在 http/1.1 时）</li><li>CSS 具有最高的优先级，最先加载，即使是放在最后面<code>9.css</code>也是比前面资源先开始加载</li><li>JS 比图片优先加载，即使出现得比图片晚</li><li>只有等 CSS 都加载完了，才能加载其它的资源，即使这个时候没有达到 6 个的限制</li><li><code>head</code>里面的非高优化级的资源最多能先加载一张（<code>0.png</code>）</li><li>XHR 的资源虽然具有高优先级，但是由于它是排在<code>3.js</code>后面的，JS 的执行是同步的，所以它排得比较靠后，如果把它排在<code>1.js</code>前面，那么它也会比图片先加载。</li></ul><p>为什么是这样呢？我们从源码寻找答案。</p><p>首先认清几个概念，请求可分为<code>delayable</code>和<code>none-delayable</code>两种:</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// The priority level below which resources are considered to be delayable.</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> net::RequestPriority</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    kDelayablePriorityThreshold </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> net::MEDIUM;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在优先级在 Net:Medium 以下的为<code>delayable</code>，即可推迟的，而大于等于 Medium 的为<code>non-delayable</code>的。因此结合 Net Priority，我们知道 CSS/JavaScript 是不可推迟的，而图片、`可推迟加载的。</p><p>还有一种是<code>layout-blocking</code>的请求：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// The priority level above which resources are considered layout-blocking if</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// the html_body has not started.</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> net::RequestPriority</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    kLayoutBlockingPriorityThreshold </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> net::MEDIUM;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>layout-blocking</code>的请求是指还没有解析到<code>body</code>标签且优先级在 Medium 之上的请求，比如<code>body</code>之前的 CSS 请求。</p><p>然后，上面提到的<code>ShouldStartRequest</code>函数，这个函数是规划资源加载顺序最主要的函数，从源码注释可以知道它大概的过程：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // ShouldStartRequest is the main scheduling algorithm.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Requests are evaluated on five attributes:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 1. Non-delayable requests:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   * Synchronous requests.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   * Non-HTTP[S] requests.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 2. Requests to request-priority-capable origin servers.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 3. High-priority requests:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   * Higher priority requests (&gt; net::LOW).</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 4. Layout-blocking requests:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   * High-priority requests (&gt; net::MEDIUM) initiated before the renderer has</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //     a &lt;body&gt;.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 5. Low priority requests</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //  The following rules are followed:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //  All types of requests:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   * Non-delayable, High-priority and request-priority capable requests are</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //     issued immediately.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   * Low priority requests are delayable.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   * While kInFlightNonDelayableRequestCountPerClientThreshold(=1)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //     layout-blocking requests are loading or the body tag has not yet been</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //     parsed, limit the number of delayable requests that may be in flight</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //     to kMaxNumDelayableWhileLayoutBlockingPerClient(=1).</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   * If no high priority or layout-blocking requests are in flight, start</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //     loading delayable requests.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   * Never exceed 10 delayable requests in flight per client.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //   * Never exceed 6 delayable requests for a given host.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的注释可以得到以下信息：</p><ul><li><code>Non-delayable</code>的、<code>High-priority</code>的请求(&gt;= Medium)、同步请求和非 http(s) 的请求能够立刻加载</li><li>只要有一个<code>layout-blocking</code>的资源在加载，最多只能加载一个<code>delayable</code>的资源，这个就解释了为什么<code>0.png</code>能够先加载</li><li>只有当<code>layout-blocking</code>和<code>High-priority</code>的资源加载完成了，才能开始加载<code>delayable</code>的资源，这个就解释了为什么要等 CSS 加载完了才能加载其它的 js 和图片</li><li>同时加载的<code>delayable</code>资源同一个域只能有 6 个，同一个<code>client</code>即同一个页面最多只能有 10 个，否则要进行排队</li></ul><p>注意这里说的开始加载，并不是说能够开始请求建立连接了。源码里面叫<code>in flight</code>，在飞行中，而不是叫<code>in request</code>之类的，能够进行<code>in flight</code>的请求是指那些不用<code>queue</code>的请求，如下图：</p><figure><img src="' + _imports_2 + '" alt="Demo 加载结果" tabindex="0" loading="lazy"><figcaption>Demo 加载结果</figcaption></figure><p>白色条是指<code>queue</code>的时间段，而灰色的是已经<code>in flight</code>了但受到同域只能最多只能建立 6 个TCP连接等的影响而进入的<code>stalled</code>状态，绿色是 TTFB（Time to First Byte）从开始建立 TCP 连接到收到第一个字节的时间，蓝色是下载的时间。</p><p>我们已经解释了大部分加载的特点的原因，对着上面那张图可以再重述一次：</p><ul><li>由于<code>1.css</code>到<code>9.css</code>这几个 CSS 文件是 High-priority 或者是 Non-delayable 的请求，所以马上<code>in flight</code>，但是还受到了同一个域最多只能有 6 个的限制，所以<code>6/7/9.css</code>这三个进入<code>stalled</code>的状态</li><li><code>1.css</code>到<code>5.css</code>是<code>layout-blocking</code>的，所以最多只能再加载一个<code>delayable</code>的<code>0.png</code>，在它相邻的<code>1.png</code>就得排队了</li><li>等到 High-priority 和<code>layout-blocking</code>的资源<code>7.css</code>/<code>9.css</code>/<code>1.js</code>加载完了，就开始加载<code>delayable</code>的资源，主要是图片。</li></ul><p>这里有个问题，为什么<code>1.js</code>是 High-priority 的，而<code>2.js</code>和<code>3.js</code>却是<code>delayable</code>的？为此在源码的<code>ShouldStartRequest</code>函数里面添加一些代码，把每次判断请求的一些关键信息打印出来：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   LOG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(INFO) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;url: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> url_request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; priority: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> url_request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">priority</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; has_html_body_: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> has_html_body_ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; delayable: &quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &lt;&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RequestAttributesAreSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">attributes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), kAttributeDelayable);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把打印出来的信息按顺序画成以下表格：</p><figure><img src="' + _imports_3 + '" alt="ShouldStartRequest日志" tabindex="0" loading="lazy"><figcaption>ShouldStartRequest日志</figcaption></figure><p><code>1.js</code>的优先级一开始是 Low 的，即是<code>delayable</code>的，但是后面又变成了 Medium 就不是<code>delayable</code>了，是 High-priority。为什么它的优先级能够提高呢？一开始是 Low 是因为它是推测加载的，所以是优先级比较低，但是当 DOM 构建到那里的时候它就不是推测加载了，而是变成正常的 JS 加载了，所以它的优先级变成了 Medium，这个可以从<code>has_html_body</code>标签进行推测，而<code>2.js</code>要等到<code>1.js</code>下载和解析完，它才是正常加载，否则还是推测加载，因此它的优先级没有得到提高。</p><p>可以看到，当<code>1.js</code>加载完成后，<code>2.js</code>没有立即加载。因为此时<code>2.js</code>还是<code>delayable</code>的，而<code>layout-blocking</code>和<code>High-priority</code>的资源（<code>7.css</code>和<code>9.css</code>）加载还未完成，因此还不能加载<code>delayable</code>的<code>2.js</code>。需要等到<code>1.js</code>执行完成后解析到<code>2.js</code>，这时<code>2.js</code>的优先级变成了 Medium，即不是<code>delayable</code>的，因此开始加载<code>2.js</code>。</p><p>在<code>2.js</code>刚开始加载时，<code>9.css</code>还未加载完成，且<code>3.js</code>仍是<code>delayable</code>的，因此<code>3.js</code>还是不能加载，需要等待<code>9.css</code>加载完成，之后<code>3.js</code>和图片等<code>delayable</code>的资源才能开始加载。</p><h3 id="preload、prefetch" tabindex="-1"><a class="header-anchor" href="#preload、prefetch"><span>preload、prefetch</span></a></h3><h4 id="preload" tabindex="-1"><a class="header-anchor" href="#preload"><span>preload</span></a></h4><p><code>&lt;link&gt;</code>元素的<code>rel</code>属性的属性值<code>preload</code>能够让你在你的 HTML 页面<code>&lt;head&gt;</code>元素内部书写一些声明式的资源获取请求，可以指明哪些资源是在页面加载完成后即刻需要的。对于这种即刻需要的资源，你可能希望在页面加载的生命周期的早期阶段就开始获取，在浏览器的主渲染机制介入前就进行预加载。这一机制使得资源可以更早的得到加载并可用，且更不易阻塞页面的初步渲染，进而提升性能。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> charset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;JS and CSS preload example&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preload&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;style.css&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;style&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preload&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello-world.png&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;script&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;style.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- ... --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通俗的解释：</p><ul><li>假设在如下的 HTML 文件里，<code>style.css</code>有张背景图片<code>hello-world.png</code></li><li>无<code>preload</code>时，数据请求的顺序为：HTML -&gt; <code>style.css</code> -&gt; <code>hello-world.png</code></li><li>有针对<code>hello-world.png</code>的<code>preload</code>时，数据请求的顺序为：HTML -&gt; <code>style.css</code>、<code>hello-world.png</code></li></ul><p>Reference: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Preloading_content" target="_blank" rel="noopener noreferrer">MDN - 通过rel=&quot;preload&quot;进行内容预加载</a></p><h4 id="prefetch" tabindex="-1"><a class="header-anchor" href="#prefetch"><span>prefetch</span></a></h4><p>链接预取是一种浏览器机制，其利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档。网页向浏览器提供一组预取提示，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中。当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。</p><p>Reference: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ" target="_blank" rel="noopener noreferrer">MDN - Link prefetching FAQ</a></p><h4 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h4><ul><li><code>preload</code><ul><li>高优先级</li><li>浏览器预先请求当前页必须需要的资源，以避免在用到的时候实时去请求</li><li>应用场景：假设主 JS 文件里会动态创建<code>image</code>标签，并插入到 DOM 里 <ul><li>不采用<code>preload</code>，则时间线是这样的：请求主 JS 文件 --&gt; 执行主 JS 文件 --&gt; 创建<code>image</code>标签并插入 DOM --&gt; 请求<code>image</code>文件 --&gt; 渲染到页面</li><li>采用<code>preload</code>预加载<code>image</code>，则时间线是这样的：请求主 JS 文件、<code>image</code>文件 --&gt; 创建<code>image</code>标签并插入 DOM（此时<code>image</code>文件已经加载好） --&gt; 渲染到页面</li></ul></li><li>不会阻塞渲染，不会阻塞<code>window</code>的<code>onload</code>事件</li></ul></li><li><code>prefetch</code><ul><li>低优先级</li><li>浏览器在后台（空闲时）获取将来可能用得到的资源，并且将他们存储在浏览器的缓存中</li></ul></li></ul><h4 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h4><ul><li>使用<code>preload</code>加载字体，解决文字闪动的问题</li></ul>', 124)),
    createVNode(_component_global_config)
  ]);
}
const browserRequests_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "browser-requests.html.vue"]]);
const data = JSON.parse('{"path":"/browser-env/browser/browser-requests.html","title":"浏览器里的资源请求","lang":"en-US","frontmatter":{"description":"浏览器里的资源请求 以下内容如无特殊说明，都是基于 Chrome 浏览器。 Preload, Prefetch And Priorities in Chrome Resource Fetch Prioritization and Scheduling in Chromium 掘金 - 浏览器页面资源加载过程与优化 知乎 - 从Chrome源码看浏览器如...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/browser-env/browser/browser-requests.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"浏览器里的资源请求"}],["meta",{"property":"og:description","content":"浏览器里的资源请求 以下内容如无特殊说明，都是基于 Chrome 浏览器。 Preload, Prefetch And Priorities in Chrome Resource Fetch Prioritization and Scheduling in Chromium 掘金 - 浏览器页面资源加载过程与优化 知乎 - 从Chrome源码看浏览器如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2021-06-14T10:58:48.000Z"}],["meta",{"property":"article:modified_time","content":"2021-06-14T10:58:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器里的资源请求\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-06-14T10:58:48.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"资源分类","slug":"资源分类","link":"#资源分类","children":[]},{"level":2,"title":"资源请求","slug":"资源请求","link":"#资源请求","children":[{"level":3,"title":"预处理请求","slug":"预处理请求","link":"#预处理请求","children":[]},{"level":3,"title":"资源排队的原因","slug":"资源排队的原因","link":"#资源排队的原因","children":[]},{"level":3,"title":"资源请求优先级","slug":"资源请求优先级","link":"#资源请求优先级","children":[]},{"level":3,"title":"preload、prefetch","slug":"preload、prefetch","link":"#preload、prefetch","children":[]}]}],"git":{"createdTime":1588670478000,"updatedTime":1623668328000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":18.17,"words":5451},"filePathRelative":"browser-env/browser/browser-requests.md","localizedDate":"May 5, 2020","autoDesc":true}');
export {
  browserRequests_html as comp,
  data
};
