import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, a as createVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createStaticVNode('<h1 id="npx-调用局部安装的模块" tabindex="-1"><a class="header-anchor" href="#npx-调用局部安装的模块"><span>npx 调用局部安装的模块</span></a></h1><p><code>npx</code>，主要解决调用项目局部安装的模块的问题。正常项目局部安装的模块比如<code>vuepress</code>，只能在项目脚本和<code>package.json</code>的<code>scripts</code>字段里面才能调用命令<code>vuepress dev</code>，若是想在命令行下调用，就必须像这样：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 项目的根目录下执行</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node-modules/.bin/vuepress</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>而<code>npx</code>就是方便直接调用项目内部安装的模块：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vuepress</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>npx</code>的原理很简单，就是运行的时候，会到<code>node_modules/.bin</code>路径和环境变量<code>$PATH</code>里面，检查命令是否存在。</p><p>由于<code>npx</code>会检查环境变量<code>$PATH</code>，所以系统命令也可以调用。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 等同于 ls</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> npx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Reference:</p><ul><li><a href="http://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener noreferrer">阮一峰 - npx 使用教程</a></li><li><a href="https://github.com/zkat/npx" target="_blank" rel="noopener noreferrer">github - npx</a></li></ul>', 10)),
    createVNode(_component_global_config)
  ]);
}
const npx_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "npx.html.vue"]]);
const data = JSON.parse('{"path":"/front-end-engineering/environment/package-manager/third-party-packages/package-env-management/npx.html","title":"npx 调用局部安装的模块","lang":"en-US","frontmatter":{"description":"npx 调用局部安装的模块 npx，主要解决调用项目局部安装的模块的问题。正常项目局部安装的模块比如vuepress，只能在项目脚本和package.json的scripts字段里面才能调用命令vuepress dev，若是想在命令行下调用，就必须像这样： 而npx就是方便直接调用项目内部安装的模块： npx的原理很简单，就是运行的时候，会到node_...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/front-end-engineering/environment/package-manager/third-party-packages/package-env-management/npx.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"npx 调用局部安装的模块"}],["meta",{"property":"og:description","content":"npx 调用局部安装的模块 npx，主要解决调用项目局部安装的模块的问题。正常项目局部安装的模块比如vuepress，只能在项目脚本和package.json的scripts字段里面才能调用命令vuepress dev，若是想在命令行下调用，就必须像这样： 而npx就是方便直接调用项目内部安装的模块： npx的原理很简单，就是运行的时候，会到node_..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-31T12:47:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-31T12:47:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"npx 调用局部安装的模块\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-31T12:47:00.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1730378820000,"updatedTime":1730378820000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":0.67,"words":200},"filePathRelative":"front-end-engineering/environment/package-manager/third-party-packages/package-env-management/npx.md","localizedDate":"October 31, 2024","autoDesc":true}');
export {
  npx_html as comp,
  data
};
