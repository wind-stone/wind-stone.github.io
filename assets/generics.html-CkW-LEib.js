import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, a as createVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createStaticVNode('<h1 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h1><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getTuple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;( </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ] {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ];</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>T</code>代表泛型类型参数（<code>generic type parameter</code>），当调用函数时会传入确定的类型。</p><h2 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类"><span>泛型类</span></a></h2><h3 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员"><span>静态成员</span></a></h3><p>类的静态成员是挂载在类自身上的，因此它们只会在类定义的时候初始化一次。由于这个原因，它们无法推断类在实例化时传入的泛型类型，而且 TypeScript 也不会允许你对静态属性和方法使用泛型类型。</p>', 6)),
    createVNode(_component_global_config)
  ]);
}
const generics_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "generics.html.vue"]]);
const data = JSON.parse('{"path":"/typescript/type-system/generics.html","title":"泛型","lang":"en-US","frontmatter":{"description":"泛型 T代表泛型类型参数（generic type parameter），当调用函数时会传入确定的类型。 泛型类 静态成员 类的静态成员是挂载在类自身上的，因此它们只会在类定义的时候初始化一次。由于这个原因，它们无法推断类在实例化时传入的泛型类型，而且 TypeScript 也不会允许你对静态属性和方法使用泛型类型。","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/typescript/type-system/generics.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"泛型 T代表泛型类型参数（generic type parameter），当调用函数时会传入确定的类型。 泛型类 静态成员 类的静态成员是挂载在类自身上的，因此它们只会在类定义的时候初始化一次。由于这个原因，它们无法推断类在实例化时传入的泛型类型，而且 TypeScript 也不会允许你对静态属性和方法使用泛型类型。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2021-10-24T03:16:16.000Z"}],["meta",{"property":"article:modified_time","content":"2021-10-24T03:16:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-10-24T03:16:16.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[{"level":3,"title":"静态成员","slug":"静态成员","link":"#静态成员","children":[]}]}],"git":{"createdTime":1626688449000,"updatedTime":1635045376000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":0.44,"words":132},"filePathRelative":"typescript/type-system/generics.md","localizedDate":"July 19, 2021","autoDesc":true}');
export {
  generics_html as comp,
  data
};
