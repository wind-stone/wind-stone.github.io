import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, a as createVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createStaticVNode('<h1 id="自定义-hooks" tabindex="-1"><a class="header-anchor" href="#自定义-hooks"><span>自定义 Hooks</span></a></h1><ul><li><a href="https://zh-hans.react.dev/learn/reusing-logic-with-custom-hooks#there-is-more-than-one-way-to-do-it" target="_blank" rel="noopener noreferrer">React 官方文档 - 使用自定义 Hook 复用逻辑</a></li></ul><h2 id="命名公约" tabindex="-1"><a class="header-anchor" href="#命名公约"><span>命名公约</span></a></h2><ul><li>React 组件名称必须以大写字母开头，比如 <code>StatusBar</code> 和 <code>SaveButton</code>。React 组件还需要返回一些 React 能够显示的内容，比如一段 JSX。</li><li>Hook 的名称必须以 <code>use</code> 开头，然后紧跟一个大写字母，就像内置的 <code>useState</code> 或者自定义的 <code>useOnlineStatus</code>。Hook 可以返回任意值。</li></ul><p>这个公约保证你始终能一眼识别出组件并且知道它的 <code>state</code>，Effect 以及其他的 React 特性可能“隐藏”在哪里。</p><h3 id="渲染期间调用的所有函数都应该以-use-前缀开头么" tabindex="-1"><a class="header-anchor" href="#渲染期间调用的所有函数都应该以-use-前缀开头么"><span>渲染期间调用的所有函数都应该以 use 前缀开头么？</span></a></h3><p>不。没有 调用 Hook 的函数不需要 变成 Hook。</p><p>如果你创建的函数没有调用任何 Hook 方法，在命名时应避免使用 use 前缀，把它当成一个常规函数去命名。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 🔴 Avoid: 没有调用其他 Hook 的 Hook</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useSorted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">items</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> items</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ✅ Good: 没有使用 Hook 的常规函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getSorted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">items</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> items</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">items</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">shouldSort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> displayedItems</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> items</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">shouldSort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ✅ 在条件分支里调用getSorted()是没问题的，因为它不是Hook</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    displayedItems</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getSorted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">items</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这保证你的代码可以在包含条件语句在内的任何地方调用这个常规函数。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><h3 id="什么时候使用自定义-hook" tabindex="-1"><a class="header-anchor" href="#什么时候使用自定义-hook"><span>什么时候使用自定义 Hook</span></a></h3><ul><li>但是每当你写 Effect 时，考虑一下把它包裹在自定义 Hook 是否更清晰。</li><li>自定义 Hook 让你可以在组件间共享逻辑。</li></ul><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><h3 id="自定义-hook-共享的只是状态逻辑而不是状态本身" tabindex="-1"><a class="header-anchor" href="#自定义-hook-共享的只是状态逻辑而不是状态本身"><span>自定义 Hook 共享的只是状态逻辑而不是状态本身</span></a></h3><p>自定义 Hook 共享的只是状态逻辑而不是状态本身。对 Hook 的每个调用完全独立于对同一个 Hook 的其他调用。</p>', 17)),
    createVNode(_component_global_config)
  ]);
}
const customHooks_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "custom-hooks.html.vue"]]);
const data = JSON.parse('{"path":"/react/hooks/custom-hooks.html","title":"自定义 Hooks","lang":"en-US","frontmatter":{"description":"自定义 Hooks React 官方文档 - 使用自定义 Hook 复用逻辑 命名公约 React 组件名称必须以大写字母开头，比如 StatusBar 和 SaveButton。React 组件还需要返回一些 React 能够显示的内容，比如一段 JSX。 Hook 的名称必须以 use 开头，然后紧跟一个大写字母，就像内置的 useState 或者...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/react/hooks/custom-hooks.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"自定义 Hooks"}],["meta",{"property":"og:description","content":"自定义 Hooks React 官方文档 - 使用自定义 Hook 复用逻辑 命名公约 React 组件名称必须以大写字母开头，比如 StatusBar 和 SaveButton。React 组件还需要返回一些 React 能够显示的内容，比如一段 JSX。 Hook 的名称必须以 use 开头，然后紧跟一个大写字母，就像内置的 useState 或者..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-24T07:40:51.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-24T07:40:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义 Hooks\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-24T07:40:51.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"命名公约","slug":"命名公约","link":"#命名公约","children":[{"level":3,"title":"渲染期间调用的所有函数都应该以 use 前缀开头么？","slug":"渲染期间调用的所有函数都应该以-use-前缀开头么","link":"#渲染期间调用的所有函数都应该以-use-前缀开头么","children":[]}]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[{"level":3,"title":"什么时候使用自定义 Hook","slug":"什么时候使用自定义-hook","link":"#什么时候使用自定义-hook","children":[]}]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[{"level":3,"title":"自定义 Hook 共享的只是状态逻辑而不是状态本身","slug":"自定义-hook-共享的只是状态逻辑而不是状态本身","link":"#自定义-hook-共享的只是状态逻辑而不是状态本身","children":[]}]}],"git":{"createdTime":1729755651000,"updatedTime":1729755651000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":1.56,"words":468},"filePathRelative":"react/hooks/custom-hooks.md","localizedDate":"October 24, 2024","autoDesc":true}');
export {
  customHooks_html as comp,
  data
};
