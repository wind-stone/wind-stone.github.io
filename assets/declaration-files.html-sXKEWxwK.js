import { r as resolveComponent, c as createElementBlock, d as createBaseVNode, a as createVNode, e as withCtx, b as createStaticVNode, o as openBlock, f as createTextVNode } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
const _hoisted_1 = { class: "table-of-contents" };
function _sfc_render(_ctx, _cache) {
  const _component_router_link = resolveComponent("router-link");
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[12] || (_cache[12] = createBaseVNode("h1", {
      id: "声明文件",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#声明文件"
      }, [
        createBaseVNode("span", null, "声明文件")
      ])
    ], -1)),
    createBaseVNode("nav", _hoisted_1, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#参考文档" }, {
            default: withCtx(() => _cache[0] || (_cache[0] = [
              createTextVNode("参考文档")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#零散知识点" }, {
            default: withCtx(() => _cache[1] || (_cache[1] = [
              createTextVNode("零散知识点")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#全局声明文件" }, {
            default: withCtx(() => _cache[2] || (_cache[2] = [
              createTextVNode("全局声明文件")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#引入全局声明文件" }, {
                default: withCtx(() => _cache[3] || (_cache[3] = [
                  createTextVNode("引入全局声明文件")
                ])),
                _: 1
              }),
              createBaseVNode("ul", null, [
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#标准库" }, {
                    default: withCtx(() => _cache[4] || (_cache[4] = [
                      createTextVNode("标准库")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#手动引入" }, {
                    default: withCtx(() => _cache[5] || (_cache[5] = [
                      createTextVNode("手动引入")
                    ])),
                    _: 1
                  }),
                  createBaseVNode("ul", null, [
                    createBaseVNode("li", null, [
                      createVNode(_component_router_link, { to: "#推荐配置" }, {
                        default: withCtx(() => _cache[6] || (_cache[6] = [
                          createTextVNode("推荐配置")
                        ])),
                        _: 1
                      })
                    ])
                  ])
                ])
              ])
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#第三方声明文件" }, {
            default: withCtx(() => _cache[7] || (_cache[7] = [
              createTextVNode("第三方声明文件")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#types-模块下的声明文件" }, {
                default: withCtx(() => _cache[8] || (_cache[8] = [
                  createTextVNode("@types 模块下的声明文件")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#模块绑定的声明文件" }, {
                default: withCtx(() => _cache[9] || (_cache[9] = [
                  createTextVNode("模块绑定的声明文件")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#为第三方模块编写声明文件" }, {
                default: withCtx(() => _cache[10] || (_cache[10] = [
                  createTextVNode("为第三方模块编写声明文件")
                ])),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#文章里的其他内容" }, {
            default: withCtx(() => _cache[11] || (_cache[11] = [
              createTextVNode("文章里的其他内容")
            ])),
            _: 1
          })
        ])
      ])
    ]),
    _cache[13] || (_cache[13] = createStaticVNode('<h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><ul><li>【强烈推荐】<a href="https://medium.com/jspoint/typescript-type-declaration-files-4b29077c43" target="_blank" rel="noopener noreferrer">A quick introduction to “Type Declaration” files and adding type support to your JavaScript packages</a></li></ul><h2 id="零散知识点" tabindex="-1"><a class="header-anchor" href="#零散知识点"><span>零散知识点</span></a></h2><ul><li>常规的 TypeScript 文件<code>.ts</code>既能包含值，也能包含类型</li><li>声明文件<code>.d.ts</code>里仅包含类型声明，而不能包含任何值。这些声明文件只是在开发过程中提供帮助，而不会成为编译产出的一部分。</li><li>你可以使用<code>import</code>语句从类型声明文件里引入类型，TypeScript 会在编译时将所有<code>import</code>类型声明文件的语句都移除掉，因为<code>import</code>声明文件不会包含被用于运行时的值</li><li>若是模块没有提供类型声明文件，则每个引入的值都会有个默认类型<code>any</code></li></ul><h2 id="全局声明文件" tabindex="-1"><a class="header-anchor" href="#全局声明文件"><span>全局声明文件</span></a></h2><ul><li>全局声明文件不需要显示引入，就可以用于项目里的任何地方。</li><li>在全局声明文件中，是不允许出现<code>import</code>/<code>export</code>关键字的。一旦出现了，那么他就会被视为一个 NPM 包或 UMD 库，就不再是全局声明文件了。</li></ul><h3 id="引入全局声明文件" tabindex="-1"><a class="header-anchor" href="#引入全局声明文件"><span>引入全局声明文件</span></a></h3><h4 id="标准库" tabindex="-1"><a class="header-anchor" href="#标准库"><span>标准库</span></a></h4><p>标准库是一些内置的全局声明文件的集合。TypeScript 编译器通过编译选项的<code>lib</code>或<code>target</code>（若<code>lib</code>未提供，则使用<code>target</code>）来确定使用哪些标准库，并将标准库的全局声明文件隐式导入，并对每一个 TypeScript 项目生效。</p><h4 id="手动引入" tabindex="-1"><a class="header-anchor" href="#手动引入"><span>手动引入</span></a></h4><p>若是想手动引入全局声明文件，我们需要设置编译选项<a href="https://www.typescriptlang.org/tsconfig#typeRoots" target="_blank" rel="noopener noreferrer">typeRoots</a>或<a href="https://www.typescriptlang.org/tsconfig#types" target="_blank" rel="noopener noreferrer">types</a>，以告知 TypeScript 编译器如何获取这些手动引入的全局声明文件。</p><p>若不设置编译选项<code>typeRoots</code>或<code>types</code>，所有<code>node_modules/@types/</code>目录里的声明文件都会被引入，包括：</p><ul><li><code>./node_modules/@types/</code></li><li><code>../node_modules/@types/</code></li><li><code>../../node_modules/@types/</code></li><li>...</li></ul><p>若是指定了<code>typeRoots</code>或<code>types</code>，只会引入<code>typeRoots</code>或<code>types</code>指定的声明文件，不会引入<code>node_modules/@types/</code>目录里的声明文件。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>typeRoots</code>配置一个路径列表，这些路径下的包都将作为声明包被隐式引入。</p><p><code>types</code>配置一个包的列表，这些包都将作为声明包被隐式引入。</p><p>尤其需要注意的是，无论是设置<code>typeRoots</code>还是<code>types</code>，最终被引入的都是声明包（<code>declaration package</code>），即引入的是该包<code>package.json</code>的<code>typings</code>字段指定的<code>.d.ts</code>文件或包根目录下的<code>index.d.ts</code>文件，而不是该包下的所有<code>.d.ts</code>文件。</p></div><h5 id="推荐配置" tabindex="-1"><a class="header-anchor" href="#推荐配置"><span>推荐配置</span></a></h5><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// tsconfig.json</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;typeRoots&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;./types&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 自定义的全局声明文件的目录，里面的每个子文件夹都是一个声明模块</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;node_modules/@types/&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 因为默认的 node_modules/@types/ 被 typeRoots 选项覆盖了，因此若是想使用 node_modules 里的第三方模块的声明文件，需要加上这一行</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第三方声明文件" tabindex="-1"><a class="header-anchor" href="#第三方声明文件"><span>第三方声明文件</span></a></h2><h3 id="types-模块下的声明文件" tabindex="-1"><a class="header-anchor" href="#types-模块下的声明文件"><span>@types 模块下的声明文件</span></a></h3><p>DefinitelyTyped 社区将为如下的库或平台编写声明包，这些声明包将在 NPM 的<code>@types</code>组织下发布。</p><ul><li>原代码未使用 TypeScript 编写的库，比如<code>lodash</code></li><li><code>node</code>这种有自己全局 API（<code>cosnole.log</code>、<code>require</code>等）和标准库模块（<code>fs</code>、<code>path</code>等）的 JavaScript 运行时</li></ul><p>因此在使用时，需要这样安装库的声明包：<code>npm install -D @types/lodash</code></p><h3 id="模块绑定的声明文件" tabindex="-1"><a class="header-anchor" href="#模块绑定的声明文件"><span>模块绑定的声明文件</span></a></h3><p>每个 NPM 包的目录结构一般是这样的：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>person</span></span>\n<span class="line"><span>  └── person.d.ts</span></span>\n<span class="line"><span>  ├── package.json</span></span>\n<span class="line"><span>  └── person.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>person</code>包里包含了<code>package.json</code>文件，其中<code>main</code>字段指向了包目录里的<code>person.js</code>文件。当在运行期间遇到项目其他模块里存在<code>import &#39;person&#39;</code>语句时，运行时（<code>runtime</code>）将执行<code>person.js</code>文件将被结果导入到其他模块。</p><p>若是 TypeScript 的编译选项<code>allowJs</code>设置为<code>true</code>，<code>person.js</code>文件也会被 TypeScript 用于分析包的 API。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// person/package.json</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;person&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./person.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;typings&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./person.d.ts&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>typings</code>（或<code>types</code>）字段指向一个声明文件（<code>.d.ts</code>），这个声明文件将代替<code>main</code>字段指向的文件，来提供给 TypeScript 编译器去了解该包的 API。</p><h3 id="为第三方模块编写声明文件" tabindex="-1"><a class="header-anchor" href="#为第三方模块编写声明文件"><span>为第三方模块编写声明文件</span></a></h3><p>假设第三方模块没有提供类型声明文件，我们可以在项目为该模块编写一个类型声明文件。（当然，最好的方式是编写后发布到 NPM 的<code>@types</code>里）</p><p>第三方模块的内容为:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// human/index.js</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Human</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> className</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Human&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">firstName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lastName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">firstName</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> firstName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lastName</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> lastName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">height</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    getHeightInCm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">height</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getFullName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">human</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">${</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">human</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">firstName</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;"> ${</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">human</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lastName</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;v1.0.0&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型声明文件：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 项目根目录下 types/human/index.d.ts</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这个类型声明文件也可以定义在别的目录下，比如 types/human-type/index.d.ts，目录的名称不一定要是 human，只要在声明模块时，模块名为 human 即可</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">declare</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> module</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;human&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // export a class</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Human</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> className</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> firstName</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> lastName</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> height</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">firstName</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lastName</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">height</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    getHeightInCm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // export default value</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> version</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getFullName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Human</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Human</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述的类型声明文件里，<code>declare module &quot;&lt;module-name&gt;&quot;</code>声明了一个环境模块，这意味着告诉 TypeScript 编译器这个模块在运行时是存在的。</p><p>最后，将<code>types</code>目录添加到<code>tsconfig.json</code>的<code>typeRoots</code>里。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// tsconfig.json</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;typeRoots&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;./types&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 自定义的全局声明文件的目录，里面的每个子文件夹都是一个声明模块</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;node_modules/@types/&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 因为默认的 node_modules/@types/ 被 typeRoots 选项覆盖了，因此若是想使用 node_modules 里的第三方模块的声明文件，需要加上这一行</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文章里的其他内容" tabindex="-1"><a class="header-anchor" href="#文章里的其他内容"><span>文章里的其他内容</span></a></h2><p><a href="https://medium.com/jspoint/typescript-type-declaration-files-4b29077c43" target="_blank" rel="noopener noreferrer">A quick introduction to “Type Declaration” files and adding type support to your JavaScript packages</a>里还有如下内容：</p><ul><li>模块化声明（<code>Modularizing Declarations</code>），即将声明写在多个文件里最终合并成一个声明文件对外提供。</li><li>环境声明（<code>Ambient declarations</code>），即将只可能出现在运行时的环境里的值如<code>window</code>作为环境声明，告知 TypeScript 编译器以免报错。</li><li>命名空间声明（<code>Namespaced Declarations</code>），将声明的类型都放置在命名空间里，防止被其他声明包覆盖或影响其他声明包。命令空间是全局可用的。</li><li>扩展声明（<code>Extending Declarations</code>），即针对全局已经存在的<code>interface</code>和<code>namespace</code>，我们可以重新声明来扩展它们。 <ul><li>注意，若是在模块里对全局类型声明进行扩展，则扩展会失效，且扩展的声明在模块内会覆盖全局类型声明，在该模块之外，全局类型声明不受影响。</li><li>若是想在模块里对全局类型声明进行扩展，要使用<code>declare global</code>。</li><li><code>global</code>关键字指向了一个 TypeScript 里隐式定义的命名空间，包含了所有的全局值包括浏览器里的<code>window</code>和 Node.js 里的<code>process</code>。</li></ul></li><li>本地类型声明（<code>Local Type Declarations</code>），即<code>.ts</code>和<code>.d.ts</code>文件在一块，可以在<code>.ts</code>里<code>import &#39;.d.ts&#39;</code>。</li></ul>', 41)),
    createVNode(_component_global_config)
  ]);
}
const declarationFiles_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "declaration-files.html.vue"]]);
const data = JSON.parse('{"path":"/typescript/usage/declaration-files.html","title":"声明文件","lang":"en-US","frontmatter":{"description":"声明文件 参考文档 【强烈推荐】A quick introduction to “Type Declaration” files and adding type support to your JavaScript packages 零散知识点 常规的 TypeScript 文件.ts既能包含值，也能包含类型 声明文件.d.ts里仅包含类型声明，而不能...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/typescript/usage/declaration-files.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"声明文件"}],["meta",{"property":"og:description","content":"声明文件 参考文档 【强烈推荐】A quick introduction to “Type Declaration” files and adding type support to your JavaScript packages 零散知识点 常规的 TypeScript 文件.ts既能包含值，也能包含类型 声明文件.d.ts里仅包含类型声明，而不能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2021-10-24T03:16:16.000Z"}],["meta",{"property":"article:modified_time","content":"2021-10-24T03:16:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"声明文件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-10-24T03:16:16.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]},{"level":2,"title":"零散知识点","slug":"零散知识点","link":"#零散知识点","children":[]},{"level":2,"title":"全局声明文件","slug":"全局声明文件","link":"#全局声明文件","children":[{"level":3,"title":"引入全局声明文件","slug":"引入全局声明文件","link":"#引入全局声明文件","children":[]}]},{"level":2,"title":"第三方声明文件","slug":"第三方声明文件","link":"#第三方声明文件","children":[{"level":3,"title":"@types 模块下的声明文件","slug":"types-模块下的声明文件","link":"#types-模块下的声明文件","children":[]},{"level":3,"title":"模块绑定的声明文件","slug":"模块绑定的声明文件","link":"#模块绑定的声明文件","children":[]},{"level":3,"title":"为第三方模块编写声明文件","slug":"为第三方模块编写声明文件","link":"#为第三方模块编写声明文件","children":[]}]},{"level":2,"title":"文章里的其他内容","slug":"文章里的其他内容","link":"#文章里的其他内容","children":[]}],"git":{"createdTime":1619180146000,"updatedTime":1635045376000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":5.69,"words":1706},"filePathRelative":"typescript/usage/declaration-files.md","localizedDate":"April 23, 2021","autoDesc":true}');
export {
  declarationFiles_html as comp,
  data
};
