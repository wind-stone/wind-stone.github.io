import { r as resolveComponent, c as createElementBlock, d as createBaseVNode, a as createVNode, e as withCtx, b as createStaticVNode, o as openBlock, f as createTextVNode } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
const _hoisted_1 = { class: "table-of-contents" };
function _sfc_render(_ctx, _cache) {
  const _component_router_link = resolveComponent("router-link");
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[4] || (_cache[4] = createBaseVNode("h1", {
      id: "ngx-http-proxy-module-模块",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#ngx-http-proxy-module-模块"
      }, [
        createBaseVNode("span", null, "ngx_http_proxy_module 模块")
      ])
    ], -1)),
    createBaseVNode("nav", _hoisted_1, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#指令" }, {
            default: withCtx(() => _cache[0] || (_cache[0] = [
              createTextVNode("指令")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#proxy-pass" }, {
                default: withCtx(() => _cache[1] || (_cache[1] = [
                  createTextVNode("proxy_pass")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#proxy-set-header" }, {
                default: withCtx(() => _cache[2] || (_cache[2] = [
                  createTextVNode("proxy_set_header")
                ])),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#内嵌变量" }, {
            default: withCtx(() => _cache[3] || (_cache[3] = [
              createTextVNode("内嵌变量")
            ])),
            _: 1
          })
        ])
      ])
    ]),
    _cache[5] || (_cache[5] = createStaticVNode('<h2 id="指令" tabindex="-1"><a class="header-anchor" href="#指令"><span>指令</span></a></h2><h3 id="proxy-pass" tabindex="-1"><a class="header-anchor" href="#proxy-pass"><span>proxy_pass</span></a></h3><div class="hint-container tip"><p class="hint-container-title">proxy_pass</p><p>Syntax: <code>proxy_pass URL;</code></p><p>Default: —</p><p>Context: <code>location</code>, if in location, limit_except</p></div><p>设置被代理的服务器的协议和地址，以及一个可选的以让<code>location</code>映射到的 URI。协议可以指定为<code>http</code>或<code>https</code>。地址可以指定为域名或 IP 地址，以及一个可选的端口:</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://localhost:8000/uri/;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或一个 UNIX 域的套接字路径，通过在<code>unix:</code>之后指定:</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://unix:/tmp/backend.socket:/uri/;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>若是域名解析到多个地址，这些地址将循环使用。此外，地址还可通过<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html" target="_blank" rel="noopener noreferrer">服务器组（server group）</a>指定。</p><p>参数值可以包含变量。这种情况下，若是指定地址为域名，则会在上述提及的服务器组里搜索，若是找不到，则使用<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#resolver" target="_blank" rel="noopener noreferrer">resolver</a>确定。</p><p>请求 URI 将按如下所述传递给服务器:</p><ul><li>若是<code>proxy_pass</code>指定了 URI，则当请求传递给服务器时，匹配了<code>location</code>的标准化请求的 URI 部分将被指令里指定的 URI 替代:</li></ul><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /example/ {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://127.0.0.1/remote/;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">译者注</p><p>比如，请求<code>/example/main.html</code>将分发到<code>http://127.0.0.1/remote/main.html</code></p></div><ul><li>若是<code>proxy_pass</code>没有指定 URI，则当原始请求被处理时，请求的 URI 将以与客户端发送的一样的形式传递给服务器，或当处理改变后的 URI 时，整个标准化的请求 URI 将传递给服务器:</li></ul><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /example/ {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://127.0.0.1;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">译者注</p><p>比如，请求<code>/example/main.html</code>将分发到<code>http://127.0.0.1/example/main.html</code></p></div><div class="hint-container warning"><p class="hint-container-title">译者注</p><p>这种情况下，<code>http://127.0.0.1</code>不能添加尾斜杠，加了尾斜杠的话，就代表了存在<code>/</code>的 URI。</p></div><div class="hint-container warning"><p class="hint-container-title">提示</p><p>在 1.1.12 版本之前，若是<code>proxy_pass</code>没指定 URI，在某些情况下，原始请求 URI 将代替改变后的 URI 传递给服务器。</p></div><p>在某些情况下，不能确定被代替的请求 URI 部分。</p><ul><li>当使用正则表达式指定<code>location</code>，且在命名的<code>location</code>之内。在这些情况下，<code>proxy_pass</code>不能带有 URI。</li><li>当 URI 在被代理的<code>location</code>之内使用<code>rewrite</code>指令改变了，并且这个配置还被用于处理请求（<code>break</code>）。这种情况下，指令里指定的 URI 将被忽略，且整个改变了的请求 URI 将被传递给服务器。</li></ul><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /name/ {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    rewrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    /name/([</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">^/]+) /users?name=$</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://127.0.0.1;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当<code>proxy_pass</code>里使用了变量。这种情况下，如果指令里指定了 URI，则该 URI 将代替原始的请求 URI 传递给服务器。</li></ul><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /name/ {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://127.0.0.1$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">request_uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WebSocket</code>代理需要特殊的配置，且只在 1.3.13 版本之后支持。</p><h3 id="proxy-set-header" tabindex="-1"><a class="header-anchor" href="#proxy-set-header"><span>proxy_set_header</span></a></h3><div class="hint-container tip"><p class="hint-container-title">proxy_set_header</p><p>Syntax: <code>proxy_set_header field value;</code></p><p>Default:</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Host $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy_host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Connection close;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Context: http, server, location</p></div><p>允许重定义或追加请求头部里的项，并传递给服务器。请求头部里项的值可以是文本、变量，或它们的组合。当且仅当当前层级里没有定义<code>proxy_set_header</code>指令时，这些指令将从先前的层级里继承。默认地，只有两项会重新定义:</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Host       $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy_host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Connection close;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>若是启用了缓存，原始请求头部里的<code>If-Modified-Since</code>、<code>If-Unmodified-Since</code>、<code>If-None-Match</code>、<code>If-Match</code>、<code>Range</code>、<code>If-Range</code>，将不会传递给被代理的服务器。</p><p>可以通过如下方式，传递一个不改变的<code>Host</code>请求头部:</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Host       $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">http_host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但若是客户端请求头部里没有<code>Host</code>项，该项就不会传递给服务器。这种情况下，最好使用<code>$host</code>变量: 当请求头部里有<code>Host</code>时，则传递给服务器的就是该<code>Host</code>的值；当请求头部里没有<code>Host</code>时，则传递的就是服务器的主域名。</p><p>此外，服务器主域名可以与服务器的端口一起传递:</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Host       $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy_port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>若是请求头部的某一项是空字符串，则这一项就不会传递给被代理的服务器:</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Accept-Encoding </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">译者注</p><p><code>$http_host</code>将取客户端请求时的<code>Host</code>，一般是域名；<code>$proxy_host</code>是被转发的服务器的 IP 地址。</p></div><h2 id="内嵌变量" tabindex="-1"><a class="header-anchor" href="#内嵌变量"><span>内嵌变量</span></a></h2><p><code>ngx_http_proxy_module</code>模块支持一些内嵌，可以用于在<code>proxy_set_header</code>指令里组成<code>headers</code>。</p><ul><li><code>$proxy_host</code><ul><li><code>proxy_pass</code>指令里指定的被代理的服务器的名称和端口</li></ul></li><li><code>$proxy_port</code><ul><li><code>proxy_pass</code>指令里指定的被代理的服务器的端口，或协议的默认端口</li></ul></li><li><code>$proxy_add_x_forwarded_for</code><ul><li>其值为: 将<code>$remote_addr</code>变量会追加在客户端请求头里的<code>X-Forwarded-For</code>项之后，并用逗号分离。</li><li>若是客户端请求头里没有<code>X-Forwarded-For</code>项，则<code>$proxy_add_x_forwarded_for</code>变量的值等同于<code>$remote_addr</code>变量。</li></ul></li></ul>', 40)),
    createVNode(_component_global_config)
  ]);
}
const ngx_http_proxy_module_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "ngx_http_proxy_module.html.vue"]]);
const data = JSON.parse('{"path":"/full-stack/software/nginx/ngx_http_proxy_module.html","title":"ngx_http_proxy_module 模块","lang":"en-US","frontmatter":{"description":"ngx_http_proxy_module 模块 指令 proxy_pass proxy_pass Syntax: proxy_pass URL; Default: — Context: location, if in location, limit_except 设置被代理的服务器的协议和地址，以及一个可选的以让location映射到的 URI。协议...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/full-stack/software/nginx/ngx_http_proxy_module.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"ngx_http_proxy_module 模块"}],["meta",{"property":"og:description","content":"ngx_http_proxy_module 模块 指令 proxy_pass proxy_pass Syntax: proxy_pass URL; Default: — Context: location, if in location, limit_except 设置被代理的服务器的协议和地址，以及一个可选的以让location映射到的 URI。协议..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-10T11:20:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-10T11:20:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ngx_http_proxy_module 模块\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-10T11:20:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"指令","slug":"指令","link":"#指令","children":[{"level":3,"title":"proxy_pass","slug":"proxy-pass","link":"#proxy-pass","children":[]},{"level":3,"title":"proxy_set_header","slug":"proxy-set-header","link":"#proxy-set-header","children":[]}]},{"level":2,"title":"内嵌变量","slug":"内嵌变量","link":"#内嵌变量","children":[]}],"git":{"createdTime":1557452176000,"updatedTime":1728559232000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":2}]},"readingTime":{"minutes":3.78,"words":1133},"filePathRelative":"full-stack/software/nginx/ngx_http_proxy_module.md","localizedDate":"May 10, 2019","autoDesc":true}');
export {
  ngx_http_proxy_module_html as comp,
  data
};
