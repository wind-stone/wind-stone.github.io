import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, a as createVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createStaticVNode('<h1 id="leetcode-数组中的第k个最大元素" tabindex="-1"><a class="header-anchor" href="#leetcode-数组中的第k个最大元素"><span>LeetCode - 数组中的第K个最大元素</span></a></h1><h2 id="【medium】获取第-k-大的数" tabindex="-1"><a class="header-anchor" href="#【medium】获取第-k-大的数"><span>【Medium】获取第 K 大的数</span></a></h2><p>参考：<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener noreferrer">Leetcode - 数组中的第K个最大元素</a></p><p>参考答案：</p><p>方法一：先排序，后获取，比如快排</p><ul><li>时间复杂度 <code>O(nlogn)</code></li><li>空间复杂度 <code>O(logn)</code></li></ul><p>方法二：基于堆排序的选择算法，<a href="https://blog.windstone.cc/interview/data-structure/heap/" target="_blank" rel="noopener noreferrer">风动之石的博客 - 堆</a></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TopK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">maxIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> heap</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Heap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">item</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        heap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">heap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">size</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maxIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            heap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> heap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：<code>O(nlogk)</code>，其中，每次调整堆的时间复杂度为<code>O(logk)</code></li><li>空间复杂度：<code>O(k)</code></li></ul><p>方法三：快排的变种，适用确定数量的情况下寻找第 K 大的数，因为已确定 K，可将快排里针对两边递归优化为只针对一边进行递归</p><ul><li>时间复杂度：最坏情况 <code>O(n^2)</code>，平均情况为<code>O(n)</code></li><li>空间复杂度：<code>O(logn)</code></li></ul>', 11)),
    createVNode(_component_global_config)
  ]);
}
const kthLargestElementInAnArray_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "kth-largest-element-in-an-array.html.vue"]]);
const data = JSON.parse('{"path":"/interview/algorithm/interview/leetcode/kth-largest-element-in-an-array.html","title":"LeetCode - 数组中的第K个最大元素","lang":"en-US","frontmatter":{"description":"LeetCode - 数组中的第K个最大元素 【Medium】获取第 K 大的数 参考：Leetcode - 数组中的第K个最大元素 参考答案： 方法一：先排序，后获取，比如快排 时间复杂度 O(nlogn) 空间复杂度 O(logn) 方法二：基于堆排序的选择算法，风动之石的博客 - 堆 时间复杂度：O(nlogk)，其中，每次调整堆的时间复杂度为O...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/interview/algorithm/interview/leetcode/kth-largest-element-in-an-array.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"LeetCode - 数组中的第K个最大元素"}],["meta",{"property":"og:description","content":"LeetCode - 数组中的第K个最大元素 【Medium】获取第 K 大的数 参考：Leetcode - 数组中的第K个最大元素 参考答案： 方法一：先排序，后获取，比如快排 时间复杂度 O(nlogn) 空间复杂度 O(logn) 方法二：基于堆排序的选择算法，风动之石的博客 - 堆 时间复杂度：O(nlogk)，其中，每次调整堆的时间复杂度为O..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-14T00:59:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T00:59:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LeetCode - 数组中的第K个最大元素\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-14T00:59:41.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"【Medium】获取第 K 大的数","slug":"【medium】获取第-k-大的数","link":"#【medium】获取第-k-大的数","children":[]}],"git":{"createdTime":1713056381000,"updatedTime":1713056381000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":0.76,"words":229},"filePathRelative":"interview/algorithm/interview/leetcode/kth-largest-element-in-an-array.md","localizedDate":"April 14, 2024","autoDesc":true}');
export {
  kthLargestElementInAnArray_html as comp,
  data
};
