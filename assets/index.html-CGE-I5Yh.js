import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, a as createVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createStaticVNode('<h1 id="微信小程序里一次-json-parse-解析错误问题的探究" tabindex="-1"><a class="header-anchor" href="#微信小程序里一次-json-parse-解析错误问题的探究"><span>微信小程序里一次 JSON.parse 解析错误问题的探究</span></a></h1><h2 id="问题描述" tabindex="-1"><a class="header-anchor" href="#问题描述"><span>问题描述</span></a></h2><p>我们知道，在微信小程序里<code>wx.request</code>请求参数里的<code>dataType</code>默认是<code>json</code>，意味着我们期望接口返回的数据格式是 JSON 文本，且系统会对返回的数据自动进行一次<code>JSON.parse</code>。因此，若接口返回的是个值为<code>object</code>的 JSON 文本，那么最终我们拿到的<code>res.data</code>应该是个 JavaScript 对象。</p><p>但是，一旦接口返回的数据里包含了行分隔符，在 iOS 系统上，就会出现一些问题。以下，我们将通过一个简单的示例来描述这个问题。</p><p>假设微信小程序项目里有以下代码: 请求<code>http://windstone.cc/test</code>接口，且假设接口返回的数据里包含了行分隔符，其 Unicode 码位为<code>U+2028</code>。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">wx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    url</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://windstone.cc/test&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    success</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;typeof data&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;string&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;字符是 &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Unicode 是 &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">codePointAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了模拟接口返回里包含行分隔符的场景，我们将<code>http://windstone.cc/test</code>请求通过 Charles 的 Map Local 功能映射到如下所示的本地 JSON 文件上。这是个值为<code>object</code> 的 JSON 文本，<code>object</code>的<code>x</code>属性的值是个仅包含单个行分隔符的字符串，该行分隔符的 Unicode 码位是<code>U+2028</code>。PS: 行分隔符是不可见字符，不同的平台对该字符的展示方式不同，你可能看到的是个空字符串，或是个乱码字符，或是个换行。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;x&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\u2028&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在微信开发者工具中运行以上代码，会打印出如下数据:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> object</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这表明接口返回的数据经过<code>JSON.parse</code>后，<code>success</code>回调里接收到的<code>res.data</code>是个 JavaScript 对象，这完全符合我们的预期。</p><p>但是，我们在 iOS 系统的手机中运行以上代码，结果却打印出了如下数据:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> string</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  7</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">78</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  : </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  } </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  7</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>res.data</code>返回的竟是个字符串！更加诡异的是，这个字符串居然跟接口返回的 JSON 文本有稍微的不同：字符串里的行分隔符（<code>U+2028</code>）不见了，原先行分隔符对应的位置上，新出现了个换行符（<code>U+000A</code>）！（换行符的 Unicode 码位转为 16 进制字符串的结果为<code>a</code>，而行分隔符为<code>2028</code>）</p><p>这似乎与我们以前的开发经验有些相悖，而在此场景里，唯一与我们以前的开发场景不一样的地方是：接口返回的数据里包含了行分隔符。</p><p>于是，我们将返回数据修改成<code>{&quot;x&quot;:1}</code>以验证是否是行分隔符搞的鬼。结果正如我们所猜想的，修改之后，无论是在微信开发者工具上还是 iOS 手机上，打印的都是<code>typeof data object</code>。</p><h2 id="进一步探究" tabindex="-1"><a class="header-anchor" href="#进一步探究"><span>进一步探究</span></a></h2><p>为了进一步探究出现这种情况的原因，我们将<code>wx.request</code>的代码稍加修改，将返回的数据格式由默认的<code>json</code>改为<code>text</code>，如此就不会自动对返回的数据进行<code>JSON.parse</code>了。此外，我们再添加一些代码，来尝试手动进行<code>JSON.parse</code>并打印一些调试信息。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">wx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    url</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://windstone.cc/test&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    dataType</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 设置返回的数据格式为 text</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    success</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;typeof data&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;string&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;字符是 &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Unicode 是 &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">codePointAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // 尝试进行 JSON.parse</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;JSON.parse 解析成功&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;x 值的 Unicode 是 &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">codePointAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;JSON.parse 解析失败&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行以上代码，在微信开发者工具中，会打印出如下数据:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> string</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  7</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">78</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  : </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是   </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2028</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  } </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  7</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">d</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 解析成功 {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\u2028&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 值的 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2028</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过打印结果可以发现，微信开发者工具中，返回的<code>text</code>格式数据里的行分隔符并没有被替换，且能正常进行<code>JSON.parse</code>，解析后的对象里，<code>x</code>的值仍是个包含单个行分隔符（<code>U+2028</code>）的字符串。</p><p>但是在 iOS 手机中，会打印出如下数据:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> string</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  7</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">78</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  : </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; Unicode 是  2</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字符是  } </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 是  7</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">d</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 解析失败 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">SyntaxError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Parse</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Unterminated</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> string</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果显示，iOS 手机中，返回的<code>text</code>格式数据<code>res.data</code>里的行分隔符（<code>U+2028</code>）被替换成了换行符（<code>U+000A</code>），而且<code>JSON.parse</code>也会失败。</p><p>这个实验说明，当我们拿到<code>res.data</code>时，返回数据里的行分隔符已经被替换成了换行符，而之所以<code>JSON.parse</code>解析失败，也是因为要解析的字符串里包含了换行符。</p><p>鉴于此，我们还要继续弄清楚两个问题:</p><ol><li>为什么 iOS 手机上接口返回的数据里，行分隔符会被替换为换行符?</li><li>为什么包含了换行符的字符串在进行<code>JSON.parse</code>时会报错？</li></ol><p>弄清楚这两个问题之后，我们还需要解决一个问题，如何对<code>res.data</code>进行正确的<code>JSON.parse</code>？</p><h2 id="原理解析" tabindex="-1"><a class="header-anchor" href="#原理解析"><span>原理解析</span></a></h2><h3 id="行分隔符被替换成换行符" tabindex="-1"><a class="header-anchor" href="#行分隔符被替换成换行符"><span>行分隔符被替换成换行符</span></a></h3><p>针对第一个问题，<a href="https://www-archive.mozilla.org/js/language/E262-3.pdf" target="_blank" rel="noopener noreferrer">ECMAScript Language Specification Edition 3 Final</a> 的<code>7.3 Line Terminators</code>章节描述如下：</p><blockquote><p>Like white space characters, line terminator characters are used to improve source text readability and to separate<br> tokens (indivisible lexical units) from each other. However, unlike white space characters, line terminators have<br> some influence over the behaviour of the syntactic grammar. In general, line terminators may occur between any<br> two tokens, but there are a few places where they are forbidden by the syntactic grammar. A line terminator cannot<br> occur within any token, not even a string. Line terminators also affect the process of automatic semicolon insertion<br> (section 7.8.5).</p><p>The following characters are considered to be line terminators:</p></blockquote><table><thead><tr><th>Code Point Value</th><th>Name</th><th>Formal Name</th></tr></thead><tbody><tr><td><code>\\u000A</code></td><td>Line Feed</td><td><code>&lt;LF&gt;</code></td></tr><tr><td><code>\\u000D</code></td><td>Carriage Return</td><td><code>&lt;CR&gt;</code></td></tr><tr><td><code>\\u2028</code></td><td>Line separator</td><td><code>&lt;LS&gt;</code></td></tr><tr><td><code>\\u2029</code></td><td>Paragraph separator</td><td><code>&lt;PS&gt;</code></td></tr></tbody></table><p>ES3 规范里说，<code>U+2028</code>和<code>U+2029</code>是行终止符，不能位于任何<code>token</code>之内，也不能出现在字符串之内。</p><p><a href="https://stackoverflow.com/questions/2965293/javascript-parse-error-on-u2028-unicode-character" target="_blank" rel="noopener noreferrer">Javascript parse error on &#39;\\u2028&#39; unicode character</a>这篇文章里提到，JavaScript parser 针对任何未编码的<code>U+2028</code>和<code>U+2029</code>，都以换行符对待。</p><p>目前我还没找到 iOS 系统里的 JavaScriptCore 将<code>U+2028</code>和<code>U+2029</code>替换为换行符的规范文档，但是在 <a href="https://www-archive.mozilla.org/js/language/E262-3.pdf" target="_blank" rel="noopener noreferrer">ECMAScript Language Specification Edition 3 Final</a> 的<code>7.8.4 String Literals</code>章节底部，有这么一句话:</p><blockquote><p><strong>NOTE</strong> A LineTerminator character cannot appear in a string literal, even if preceded by a backslash . The correct way to cause<br> a line terminator character to be part of the string value of a string literal is to use an escape sequence such as \\n or \\u000A.</p></blockquote><p>根据这句话，JavaScriptCore 将<code>U+2028</code>和<code>U+2029</code>替换为换行符也是说得通的。</p><p>因此，iOS 系统里的 JavaScriptCore 可能仍然是按 ES3 的规范来处理行分隔符的，将其替换成了换行符，而且是在我们拿到<code>res.data</code>字符串之前。所以我们拿到<code>res.data</code>字符串时，字符串里已经没有行分隔符了，有的只是换行符。</p><p>BTW，在最新的 <a href="https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf" target="_blank" rel="noopener noreferrer">ECMA-262 11th Edition</a> 规范里，为了与 JSON 保持一致，允许<code>U+2028</code>和<code>U+2029</code>出现在字符串里。</p><h3 id="含有换行符的字符串-json-parse-出错" tabindex="-1"><a class="header-anchor" href="#含有换行符的字符串-json-parse-出错"><span>含有换行符的字符串 JSON.parse 出错</span></a></h3><p>既然 iOS 的 JavaScriptCore 已经将行分隔符替换为了换行符，为什么仍然不可以<code>JSON.parse</code>呢？</p><p>查看 JSON 规范可知，JSON 文本的值可以是<code>object</code>、<code>array</code>、<code>number</code>、<code>string</code>、<code>true</code>、<code>false</code>、<code>null</code>。</p><p>接口返回的 JSON 文本经过上一步的替换后变成了这样:<code>{&quot;x&quot;:&quot;↵&quot;}</code>。（<code>↵</code>仅作为换行符的示意表示，实际上换行符是不可见的控制字符，无法显示在页面上）</p><p>如果<code>{&quot;x&quot;:&quot;↵&quot;}</code>这个字符串是个有效的能被解析的 JSON 文本，则整个 JSON 文本的值就是个 JSON 的<code>object</code>，<code>object</code>里有个<code>x</code>属性，其是个包含了单个换行符的<code>string</code>。但是，问题就出在这里，<code>&quot;↵&quot;</code>并不是个有效的 JSON<code>string</code>。</p><figure><img src="https://static.yximgs.com/udata/pkg/EE-KSTACK/07c5836eb1b6dc34525c671634b1be6d.png" alt="07c5836eb1b6dc34525c671634b1be6d.png" tabindex="0" loading="lazy"><figcaption>07c5836eb1b6dc34525c671634b1be6d.png</figcaption></figure><blockquote><p>A string is a sequence of Unicode code points wrapped with quotation marks (U+0022). All code points may be placed within the quotation marks except for the code points that must be escaped: quotation mark(U+0022), reverse solidus (U+005C), and the control characters U+0000 to U+001F. There are two-character escape sequence representations of some characters.</p><p><code>\\&quot;</code> represents the quotation mark character (U+0022).</p><p><code>\\\\</code> represents the reverse solidus character (U+005C).</p><p><code>\\/</code> represents the solidus character (U+002F).</p><p><code>\\b</code> represents the backspace character (U+0008).</p><p><code>\\f</code> represents the form feed character (U+000C).</p><p><code>\\n</code> represents the line feed character (U+000A).</p><p><code>\\r</code> represents the carriage return character (U+000D).</p><p><code>\\t</code> represents the character tabulation character (U+0009).</p></blockquote><p>按照<a href="https://www.ecma-international.org/publications/standards/Ecma-404.htm" target="_blank" rel="noopener noreferrer">Standard ECMA-404 The JSON Data Interchange Syntax</a>里的规定，有效的 JSON <code>string</code>要求放置在两个<code>&quot;</code>之间，且：</p><ul><li><code>&quot;</code>和<code>\\</code>不能单独出现在两个<code>&quot;</code>之内，需要使用<code>\\</code>对其进行转义，比如<code>\\&quot;</code>表示单个字符<code>&quot;</code>，<code>\\\\</code>表示单个字符<code>\\</code>。</li><li><code>\\</code>后紧跟着<code>/</code>、<code>b</code>、<code>f</code>、<code>n</code>、<code>r</code>、<code>t</code>也都各自表示特殊的字符。</li><li>两个<code>&quot;</code>之内不能出现控制字符（Unicode 码位在<code>U+0000</code>~<code>U+001F</code>区间）</li></ul><p>而 Unicode 码位为<code>U+000A</code>的换行符<code>↵</code>就是控制字符。因此，<code>&quot;↵&quot;</code>不是个有效的 JSON <code>string</code>，进而<code>{&quot;x&quot;:&quot;↵&quot;}</code>不是个有效的 JSON <code>object</code>，最终导致<code>JSON.parse</code>失败。</p><p>说了这么多，不如用更简单的方式验证一下，在浏览器控制台输入以下代码观看结果:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{&quot;x&quot;:&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\u000A</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;}&#39;</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Uncaught SyntaxError: Unexpected token</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// in JSON at position 6</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//     at JSON.parse (&lt;anonymous&gt;)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//     at &lt;anonymous&gt;:2:6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于字符串字面量要经过一层 JavaScript 解析，因此<code>{&quot;x&quot;:&quot;\\u000A&quot;}</code>经过 JavaScript 解析后，就变成了 JavaScript 字符串<code>{&quot;x&quot;:&quot;↵&quot;}</code>，而在将其<code>JSON.parse</code>时就报错了，提示<code>↵</code>是个不期望出现的<code>token</code>。</p><p>因此，之所以在对包含换行符的字符串进行<code>JSON.parse</code>时会出错，是因为换行符属于控制字符，不能出现在 JSON 文本的<code>string</code>里，否则该 JSON 文本就不是个有效的 JSON 文本，不能被成功解析。</p><p>现在，现象与原理我们都弄清楚了，下一步要做的就是如何正确地对包含换行符的数据进行<code>JSON.parse</code>了。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>再次查看下 JSON 规范里的<code>string</code>，其不允许两个<code>&quot;</code>之间出现控制字符，但其又说<code>\\n</code>这个转义序列代表的是个换行符。这也就说，转义序列<code>\\n</code>在 JSON 文本里代表的是换行符，而且会在<code>JSON.parse</code>时被解析成换行符这个字符。</p><p>因此，我们在<code>JSON.parse</code>之前，先通过正则匹配到换行符，将换行符替换为<code>\\n</code>，就可以顺利进行<code>JSON.parse</code>了。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">wx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    url</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://windstone.cc/test&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    success</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;string&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">          data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">\\n</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">n&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 此处将换行符替换成 \\\\n，即可顺利解析</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;JSON.parse 解析失败&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里要注意的是，<code>\\\\n</code>是个字符串字面量，会先被 JavaScript 解析得到 JavaScript 字符串<code>\\n</code>，再替换换行符。替换后的<code>data</code>即为<code>{&quot;x&quot;:&quot;\\n&quot;}</code>，经过<code>JSON.parse</code>之后，即可得到 JavaScript 对象<code>{x: &#39;↵&#39;}</code>。</p><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h2><ul><li>本文里测试的 iOS 手机是 iPhone XS MAX 和 iPhone 11 Pro MAX，微信版本都是 7.0.14。</li><li>本文描述的问题只出现在 iOS 手机上，Android 手机没问题。</li><li>文章里所说的接口返回数据里包含行分隔符是指返回的 JSON 文本的<code>string</code>里包含行分隔符。</li></ul><h3 id="接口返回数据里为什么会包含行分隔符" tabindex="-1"><a class="header-anchor" href="#接口返回数据里为什么会包含行分隔符"><span>接口返回数据里为什么会包含行分隔符</span></a></h3><p>经过上面的分析，我们知道是接口返回的 JSON 文本里的某个<code>string</code>里包含行分隔符导致了 iOS JavaScriptCore 将行分隔符替换为换行符，进而导致<code>JSON.parse</code>解析失败。</p><p>但是，接口返回的 JSON 文本里为什么会包含行分隔符呢？经过与相关同学的共同排查发现，运营人员在管理系统页面的输入框里输入的内容，是从某个文件里直接复制过去的，而行分隔符也是复制过去的。</p><p>尽管管理系统前端传给后端的是经过<code>JSON.stringify</code>后的 JSON 格式的数据，但是<code>JSON.stringify</code>是无法将行分隔符字符串化为转义序列的形式，因此传给后端存在数据库里的数据仍包含行分隔符。</p><h4 id="json-stringify-无法转换行分隔符" tabindex="-1"><a class="header-anchor" href="#json-stringify-无法转换行分隔符"><span>JSON.stringify 无法转换行分隔符</span></a></h4><p>参考规范文档<a href="https://tc39.es/ecma262/#sec-quotejsonstring" target="_blank" rel="noopener noreferrer">ECMA 262 - JSON.stringify - QuoteJSONString</a>，<code>JSON.stringify</code>可以将换行符转换为<code>&quot;\\n&quot;</code>，但是不能将行分隔符转成转义序列的形式，而是保持行分隔符这个字符不变。</p><p>以下操作可以直观地看到这一事实。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charCodeAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;22&quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charCodeAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;5c&quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charCodeAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;6e&quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charCodeAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;22&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\u2028</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;\u2028&quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\u2028&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charCodeAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;22&quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charCodeAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;2028&quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charCodeAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;22&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，码位为<code>\\u2028</code>的字符是非打印字符，我们能看到的可能是个类似乱码的符号。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><ul><li><a href="https://www-archive.mozilla.org/js/language/E262-3.pdf" target="_blank" rel="noopener noreferrer">ECMAScript Language Specification Edition 3 Final</a></li><li><a href="https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf" target="_blank" rel="noopener noreferrer">ECMA-262 11th Edition</a></li><li><a href="https://stackoverflow.com/questions/2965293/javascript-parse-error-on-u2028-unicode-character" target="_blank" rel="noopener noreferrer">Javascript parse error on &#39;\\u2028&#39; unicode character</a></li><li><a href="http://timelessrepo.com/json-isnt-a-javascript-subset" target="_blank" rel="noopener noreferrer">JSON: The JavaScript subset that isn&#39;t</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Issue_with_plain_JSON.stringify_for_use_as_JavaScript" target="_blank" rel="noopener noreferrer">MDN - JSON.stringify - Issue with plain JSON.stringify for use as JavaScript</a></li><li><a href="https://www.ecma-international.org/publications/standards/Ecma-404.htm" target="_blank" rel="noopener noreferrer">Standard ECMA-404 The JSON Data Interchange Syntax</a></li></ul>', 75)),
    createVNode(_component_global_config)
  ]);
}
const index_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "index.html.vue"]]);
const data = JSON.parse('{"path":"/articles/line-terminator/","title":"微信小程序里一次 JSON.parse 解析错误问题的探究","lang":"en-US","frontmatter":{"description":"微信小程序里一次 JSON.parse 解析错误问题的探究 问题描述 我们知道，在微信小程序里wx.request请求参数里的dataType默认是json，意味着我们期望接口返回的数据格式是 JSON 文本，且系统会对返回的数据自动进行一次JSON.parse。因此，若接口返回的是个值为object的 JSON 文本，那么最终我们拿到的res.dat...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/articles/line-terminator/"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"微信小程序里一次 JSON.parse 解析错误问题的探究"}],["meta",{"property":"og:description","content":"微信小程序里一次 JSON.parse 解析错误问题的探究 问题描述 我们知道，在微信小程序里wx.request请求参数里的dataType默认是json，意味着我们期望接口返回的数据格式是 JSON 文本，且系统会对返回的数据自动进行一次JSON.parse。因此，若接口返回的是个值为object的 JSON 文本，那么最终我们拿到的res.dat..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static.yximgs.com/udata/pkg/EE-KSTACK/07c5836eb1b6dc34525c671634b1be6d.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2020-08-18T18:51:41.000Z"}],["meta",{"property":"article:modified_time","content":"2020-08-18T18:51:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微信小程序里一次 JSON.parse 解析错误问题的探究\\",\\"image\\":[\\"https://static.yximgs.com/udata/pkg/EE-KSTACK/07c5836eb1b6dc34525c671634b1be6d.png\\"],\\"dateModified\\":\\"2020-08-18T18:51:41.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"问题描述","slug":"问题描述","link":"#问题描述","children":[]},{"level":2,"title":"进一步探究","slug":"进一步探究","link":"#进一步探究","children":[]},{"level":2,"title":"原理解析","slug":"原理解析","link":"#原理解析","children":[{"level":3,"title":"行分隔符被替换成换行符","slug":"行分隔符被替换成换行符","link":"#行分隔符被替换成换行符","children":[]},{"level":3,"title":"含有换行符的字符串 JSON.parse 出错","slug":"含有换行符的字符串-json-parse-出错","link":"#含有换行符的字符串-json-parse-出错","children":[]}]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"说明","slug":"说明","link":"#说明","children":[{"level":3,"title":"接口返回数据里为什么会包含行分隔符","slug":"接口返回数据里为什么会包含行分隔符","link":"#接口返回数据里为什么会包含行分隔符","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1596219125000,"updatedTime":1597776701000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":11.32,"words":3395},"filePathRelative":"articles/line-terminator/README.md","localizedDate":"August 1, 2020","autoDesc":true}');
export {
  index_html as comp,
  data
};
