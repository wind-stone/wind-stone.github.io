import { r as resolveComponent, c as createElementBlock, d as createBaseVNode, a as createVNode, e as withCtx, b as createStaticVNode, o as openBlock, f as createTextVNode } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
const _hoisted_1 = { class: "table-of-contents" };
function _sfc_render(_ctx, _cache) {
  const _component_router_link = resolveComponent("router-link");
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[22] || (_cache[22] = createBaseVNode("h1", {
      id: "页面首次渲染",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#页面首次渲染"
      }, [
        createBaseVNode("span", null, "页面首次渲染")
      ])
    ], -1)),
    createBaseVNode("nav", _hoisted_1, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#javascript-阻塞和-css-阻塞" }, {
            default: withCtx(() => _cache[0] || (_cache[0] = [
              createTextVNode("JavaScript 阻塞和 CSS 阻塞")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#css-阻塞" }, {
                default: withCtx(() => _cache[1] || (_cache[1] = [
                  createTextVNode("CSS 阻塞")
                ])),
                _: 1
              }),
              createBaseVNode("ul", null, [
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#css-文件的加载会阻塞其后-javascript-的执行" }, {
                    default: withCtx(() => _cache[2] || (_cache[2] = [
                      createTextVNode("CSS 文件的加载会阻塞其后 JavaScript 的执行")
                    ])),
                    _: 1
                  })
                ])
              ])
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#再问一次-css-文件的加载会阻塞-dom-树的解析吗" }, {
                default: withCtx(() => _cache[3] || (_cache[3] = [
                  createTextVNode("再问一次：CSS 文件的加载会阻塞 DOM 树的解析吗？")
                ])),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#页面解析过程" }, {
            default: withCtx(() => _cache[4] || (_cache[4] = [
              createTextVNode("页面解析过程")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#head-标签" }, {
                default: withCtx(() => _cache[5] || (_cache[5] = [
                  createTextVNode("head 标签")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#body-标签" }, {
                default: withCtx(() => _cache[6] || (_cache[6] = [
                  createTextVNode("body 标签")
                ])),
                _: 1
              }),
              createBaseVNode("ul", null, [
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#情况一-只有-dom-元素" }, {
                    default: withCtx(() => _cache[7] || (_cache[7] = [
                      createTextVNode("情况一：只有 DOM 元素")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#情况二-有-dom-元素和外链-javascript-文件" }, {
                    default: withCtx(() => _cache[8] || (_cache[8] = [
                      createTextVNode("情况二：有 DOM 元素和外链 JavaScript 文件")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#情况三-有-dom-元素和外链-css-文件" }, {
                    default: withCtx(() => _cache[9] || (_cache[9] = [
                      createTextVNode("情况三：有 DOM 元素和外链 CSS 文件")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#情况四-有-dom-元素、外链-javascript-和-css-文件" }, {
                    default: withCtx(() => _cache[10] || (_cache[10] = [
                      createTextVNode("情况四：有 DOM 元素、外链 JavaScript 和 CSS 文件")
                    ])),
                    _: 1
                  })
                ])
              ])
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#为什么-dom-cssom-树不完整时也会渲染" }, {
                default: withCtx(() => _cache[11] || (_cache[11] = [
                  createTextVNode("为什么 DOM/CSSOM 树不完整时也会渲染？")
                ])),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#资源的放置顺序" }, {
            default: withCtx(() => _cache[12] || (_cache[12] = [
              createTextVNode("资源的放置顺序")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#为什么要将外链-javascript-文件放在文档底部" }, {
                default: withCtx(() => _cache[13] || (_cache[13] = [
                  createTextVNode("为什么要将外链 JavaScript 文件放在文档底部")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#为什么要将-css-放在-head-标签里" }, {
                default: withCtx(() => _cache[14] || (_cache[14] = [
                  createTextVNode("为什么要将 CSS 放在 head 标签里")
                ])),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#domcontentloaded-和-load-事件的触发时机" }, {
            default: withCtx(() => _cache[15] || (_cache[15] = [
              createTextVNode("DOMContentLoaded 和 load 事件的触发时机")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#浏览器下载并发数" }, {
            default: withCtx(() => _cache[16] || (_cache[16] = [
              createTextVNode("浏览器下载并发数")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#异步脚本" }, {
            default: withCtx(() => _cache[17] || (_cache[17] = [
              createTextVNode("异步脚本")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#defer-vs-async" }, {
                default: withCtx(() => _cache[18] || (_cache[18] = [
                  createTextVNode("defer VS async")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#es6-模块" }, {
                default: withCtx(() => _cache[19] || (_cache[19] = [
                  createTextVNode("ES6 模块")
                ])),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#优化技巧" }, {
            default: withCtx(() => _cache[20] || (_cache[20] = [
              createTextVNode("优化技巧")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#参考文章" }, {
            default: withCtx(() => _cache[21] || (_cache[21] = [
              createTextVNode("参考文章")
            ])),
            _: 1
          })
        ])
      ])
    ]),
    _cache[23] || (_cache[23] = createStaticVNode('<p>页面首次渲染的时机，会根据 HTML 里内容的不同以及内容的放置顺序不同而有所区别。</p><p>浏览器里，渲染进程的主线程负责解析 HTML，解析会按照由上而下的顺序进行。</p><p>讨论页面的首次渲染之前，我们应该明白几个前提知识：</p><blockquote><ul><li>预加载扫描器会在后台预先请求资源，不需要等解析到外链 CSS、JavaScript 文件所在行才去请求资源</li><li>外链 CSS 文件的加载，不会阻塞其后 HTML 内容的<strong>解析</strong></li><li>外链 CSS 文件的加载，会阻塞其后外链 JavaScript 文件的执行</li></ul></blockquote><h2 id="javascript-阻塞和-css-阻塞" tabindex="-1"><a class="header-anchor" href="#javascript-阻塞和-css-阻塞"><span>JavaScript 阻塞和 CSS 阻塞</span></a></h2><h3 id="css-阻塞" tabindex="-1"><a class="header-anchor" href="#css-阻塞"><span>CSS 阻塞</span></a></h3><ul><li>CSS 文件的加载不会阻塞其后 DOM 的解析</li><li>CSS 文件的加载会阻塞其后 DOM 的渲染</li></ul><h4 id="css-文件的加载会阻塞其后-javascript-的执行" tabindex="-1"><a class="header-anchor" href="#css-文件的加载会阻塞其后-javascript-的执行"><span>CSS 文件的加载会阻塞其后 JavaScript 的执行</span></a></h4><p>CSS 文件的加载，会阻塞其后 JavaScript 的执行，因为<strong>JavaScript 经常用于查询元素的 CSS 属性</strong>。详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work#%E9%A2%84%E5%8A%A0%E8%BD%BD%E6%89%AB%E6%8F%8F%E5%99%A8" target="_blank" rel="noopener noreferrer">MDN - 渲染页面：浏览器的工作原理 - 预加载扫描器</a></p><h3 id="再问一次-css-文件的加载会阻塞-dom-树的解析吗" tabindex="-1"><a class="header-anchor" href="#再问一次-css-文件的加载会阻塞-dom-树的解析吗"><span>再问一次：CSS 文件的加载会阻塞 DOM 树的解析吗？</span></a></h3><p>答案是：可能会！</p><p>鉴于 CSS 文件的加载会阻塞其后 JavaScript 的执行，而 JavaScript 的执行会阻塞其后 DOM 树的解析。</p><p>因此，若 CSS 文件之后存在 JavaScript 代码，JavaScript 代码后存在 DOM，则 CSS 文件的加载会间接阻塞 DOM 树的解析。</p><p>鉴于此，若 HTML 里的结构是这样的：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text/css&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;index.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;JavaScript after link css&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;content&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;内容&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，<code>index.css</code>的加载会阻塞其后<code>script</code>的执行，进而间接地阻塞了 DOM 的解析。</p><h2 id="页面解析过程" tabindex="-1"><a class="header-anchor" href="#页面解析过程"><span>页面解析过程</span></a></h2><h3 id="head-标签" tabindex="-1"><a class="header-anchor" href="#head-标签"><span>head 标签</span></a></h3><p>当解析到<code>head</code>标签时，<code>head</code>标签内的外部资源主要是外链 JavaScript 文件和外链 CSS 文件。</p><p>若解析到外链 JavaScript 文件，则主线程会停止解析之后的 HTML 内容，等待该 JavaScript 文件下载并执行；执行完成后，继续解析之后的 HTML 内容。因此，<code>head</code>标签里外链 JavaScript 文件的加载和执行，会阻塞其后 HTML 内容的解析，进而阻塞页面的首次渲染，但不会影响后面资源的下载（预加载扫描器会在后台预先请求资源）。</p><p>若解析到外链 CSS 文件，主线程会继续解析之后的 HTML 内容，即<code>head</code>标签里的外链 CSS 文件不会阻塞其后 HTML 内容的解析，但是会阻塞页面的首次渲染。</p><h3 id="body-标签" tabindex="-1"><a class="header-anchor" href="#body-标签"><span>body 标签</span></a></h3><p>当解析到<code>body</code>标签时，<code>body</code>里可能会有 DOM 元素、外链 JavaScript/CSS 文件。根据不同的内容，浏览器的解析机制也会不同。</p><p>本章节之后的示例代码都以如下 HTML 为模板，示例的代码都放置在如下 HTML 的<code>body</code>标签里。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DOCTYPE</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;en&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> charset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;IE=edge&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;viewport&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Document&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!-- 示例代码都放置在这里 --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>red-color.css</code>:</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    color: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>blue-color.css</code>:</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    color: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">blue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>index.js</code>:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;index.js 已执行&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="情况一-只有-dom-元素" tabindex="-1"><a class="header-anchor" href="#情况一-只有-dom-元素"><span>情况一：只有 DOM 元素</span></a></h4><p>若只有 DOM 元素，则等 DOM 树构建完成后，结合 CSSOM 树生成 Render 树，<strong>页面首次渲染</strong>。</p><h4 id="情况二-有-dom-元素和外链-javascript-文件" tabindex="-1"><a class="header-anchor" href="#情况二-有-dom-元素和外链-javascript-文件"><span>情况二：有 DOM 元素和外链 JavaScript 文件</span></a></h4><p>当解析到外链 JavaScript 时，若该 JavaScript 文件尚未加载完成，则该 JavaScript 文件之前已构建（但不完整）的 DOM 树会与 CSSOM 树会生成 Render 树，进行<strong>页面首次渲染</strong>。</p><p>此时，主线程会等待该 JavaScript 文件的加载和执行，并停止解析其后 HTML 内容。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;尝试阻塞 index.js 文件的加载，此处的文字会先渲染出来&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 此时，即使添加如下 CSS 文件（index.js 阻塞了解析，主线程还没解析到该 CSS 文件），第一行文案依然会先渲染出来，原因见下一小节 --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text/css&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./red-color.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;index.js 加载并执行完成之后，此处的文字才会渲染出来&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="情况三-有-dom-元素和外链-css-文件" tabindex="-1"><a class="header-anchor" href="#情况三-有-dom-元素和外链-css-文件"><span>情况三：有 DOM 元素和外链 CSS 文件</span></a></h4><p>若 HTML 里仅包含 DOM 元素和外链 CSS 文件，<strong>CSS 文件与 DOM 元素的位置会影响页面首次渲染的时机</strong>。</p><p>外链 CSS 文件在 DOM 元素之前，若 CSS 文件没加载完成，会阻塞其后 DOM 元素的渲染（但不会阻塞其后 DOM 元素的解析）。也就是说，在这种情况下，只有等待 CSS 文件加载完成，页面才会首次渲染。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text/css&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./red-color.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;red-color.css 没加载完成之前，此处的文字不会渲染出来&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>外链 CSS 文件在 DOM 元素之后，即使 CSS 文件没加载完成，也不会影响该 CSS 文件之前的 DOM 元素的渲染，但是会阻塞其之后 DOM 元素的渲染。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;FIRST: red-color.css 没加载完成之前，此处的文字会先渲染出来，但颜色是默认的黑色&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text/css&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./red-color.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;SECOND: red-color.css 加载完成之后，此处的文字才会渲染出来，且颜色是红色，FIRST 也会变成红色&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="情况四-有-dom-元素、外链-javascript-和-css-文件" tabindex="-1"><a class="header-anchor" href="#情况四-有-dom-元素、外链-javascript-和-css-文件"><span>情况四：有 DOM 元素、外链 JavaScript 和 CSS 文件</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FIRST:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    阻塞 index.js 文件和 red-color.css、blue-color.css 的加载，</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    此处的文字会先渲染且为黑色。</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text/css&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./red-color.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    SECOND:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    先让 red-color.css 完成加载，此处的文字才会渲染出来且为红色，</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FIRST 也会重新渲染成红色（red-color.css 生效了）。</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    THIRD:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    再让 index.js 完成加载，此处的文字才会渲染出来且为红色。</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text/css&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./blue-color.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FOURTH:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    再让 blue-color.css 完成加载，此处的文字才会渲染出来且为蓝色，</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    且之前所有的文字都重新渲染成蓝色</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>页面的渲染顺序已经在上述 HTML 里说明了，从这个结果上来看，可以总结出：</p><ul><li>若外链 CSS 文件未加载完成，则该 CSS 文件之前的 DOM 元素会渲染出来，但其之后的 DOM 元素不会渲染出来</li><li>若 DOM 元素之前存在外链的 CSS 文件，只有等这些 CSS 文件加载完成，该 DOM 元素才会渲染出来</li></ul><p>此外，若是先让<code>index.js</code>加载完成并执行，主线程会继续往下解析 HTML 内容并完成整个 DOM 树的构建。若此时<code>red-color.css</code>仍在加载，则<code>red-color.css</code>之后的 DOM 元素仍然无法渲染。</p><h3 id="为什么-dom-cssom-树不完整时也会渲染" tabindex="-1"><a class="header-anchor" href="#为什么-dom-cssom-树不完整时也会渲染"><span>为什么 DOM/CSSOM 树不完整时也会渲染？</span></a></h3><p>参考文档：<a href="https://juejin.cn/post/6844903829528543240" target="_blank" rel="noopener noreferrer">掘金 - 对浏览器首次渲染时间点的探究</a></p><p>从以上的实验结果可以看出，即使 DOM 树不完整、CSSOM 树也不完整，但页面里外链 CSS 文件之前的 DOM 元素依然进行了渲染。</p><p>为什么会出现这种情况呢？总结来说：</p><blockquote><p>An end tag whose tag name is &quot;script&quot;</p><p>...</p><ol><li>Let the script be the pending parsing-blocking script. There is no longer a pending parsing-blocking script.</li><li>Start the speculative HTML parser for this instance of the HTML parser.</li><li>Block the tokenizer for this instance of the HTML parser, such that the event loop will not run tasks that invoke the tokenizer.</li><li>If the parser&#39;s Document has a style sheet that is blocking scripts or the script&#39;s &quot;ready to be parser-executed&quot; flag is not set: spin the event loop until the parser&#39;s Document has no style sheet that is blocking scripts and the script&#39;s &quot;ready to be parser-executed&quot; flag is set.</li><li>If this parser has been aborted in the meantime, return.</li></ol><p>...</p></blockquote><p>当浏览器主线程解析到<code>&lt;/script&gt;</code>标签时，若当前文档存在<strong>阻碍 JS 执行的 CSS</strong>或者<strong>当前的脚本不处于<code>ready to be parser-executed</code>状态</strong>，则<code>spin the event loop</code>，直到不再存在阻碍 JS 执行的 CSS 且该段脚本处于<code>ready to be parser-executed</code>。</p><p>我们知道，外链 CSS 文件的加载会阻塞其后 JavaScript 文件的执行。而脚本不处于<code>ready to be parser-executed</code>状态是指脚本还没加载完。如果出现这两种情况，脚本就没法立即执行，需要等待外链 CSS 文件加载完成或者外链 JavaScript 文件加载完成。此时，浏览器会<code>spin the event loop</code>，该操作即为：</p><blockquote><p>（简单翻译，待修改）</p><ol><li>暂存此时正在执行的 task 或 microtask</li><li>暂存此时的 js 执行上下文堆栈</li><li>清空 js执行上下文堆栈</li><li>如果当前正在执行的是 task，执行 microtask checkpoint</li><li>停止执行当前的 task/microtask。继续执行 eventloop 的主流程。</li><li>当满足条件时，重新添加之前暂存的 task/microtask，恢复暂存的 js 执行上下文堆栈，继续执行。</li></ol></blockquote><p>简单说就是，让<code>event loop</code>中断并暂存当前正在执行的<code>task</code>/<code>microtask</code>，保持<code>event loop</code>继续执行，待一段时间之后满足条件了再恢复之前的<code>task</code>/<code>microtask</code>。</p><p>因此，这个问题的答案就出来了：如果在 HTML 解析过程中，解析到了某个脚本但这个脚本被 CSS 阻塞住了或者还没下载完，则会中断暂存当前的解析<code>task</code>，继续执行<code>event loop</code>，网页被渲染。如果 JavaScript 全部是内联的或者网速好，在解析到<code>&lt;/script&gt;</code>时脚本全都已下载完了，则解析<code>task</code>不会被中断，也就不会出现渲染情况了。</p><h2 id="资源的放置顺序" tabindex="-1"><a class="header-anchor" href="#资源的放置顺序"><span>资源的放置顺序</span></a></h2><h3 id="为什么要将外链-javascript-文件放在文档底部" tabindex="-1"><a class="header-anchor" href="#为什么要将外链-javascript-文件放在文档底部"><span>为什么要将外链 JavaScript 文件放在文档底部</span></a></h3><p>先说结论：JavaScript 的加载和执行，会阻塞 JavaScript 之后 DOM 节点的解析和渲染，但不会影响其之前 DOM 节点的解析和渲染，因此要将外链 JavaScript 文件放到页面尽可能底部的地方。</p><p>但是要完全弄明白这个问题，就要深究以上的结论。</p><p>首先，JavaScript 的加载和执行，为什么会阻塞其之后 DOM 节点的解析和渲染呢？这完全是历史原因。以前的 JavaScript 经常在执行的时候运行<code>document.write</code>（往文档里插入内容），这可能会导致其后 DOM 节点完全发生变化，因此无法安全地在 JavaScript 执行的同时来渲染 DOM 节点。</p><div class="hint-container tip"><p class="hint-container-title">相关知识点</p><p><code>document.write</code>方法将一个文本字符串写入一个由<code>document.open()</code>打开的文档流（document stream）。</p><p>若向一个已经加载且没有调用过<code>document.open()</code>的文档写入数据时，会自动调用<code>document.open</code>。一旦完成了数据写入，建议调用<code>document.close()</code>，以告诉浏览器当前页面已经加载完毕。写入的数据会被解析到文档结构模型（DOM）里，完全覆盖当面的文档（即<code>&lt;html&gt;</code>标签内的内容都被替换）。</p><p>若<code>document.write</code>是在页面的<code>&lt;script&gt;&lt;/script&gt;</code>里同步调用的（说明当前文档还未完成加载），则它将不会自动调用<code>document.open()</code>，且此时通过<code>document.write</code>写入的内容会追加在当前文档里。</p></div><p>现在的浏览器都支持<code>async</code>或者<code>defer</code>属性了，说明脚本非阻塞其实一点问题都没有，而脚本阻塞就是历史原因导致的兼容性问题。</p><p>正是因为 JavaScript 的加载和执行会阻塞其后 DOM 节点的解析和渲染，因此若是将外链 JavaScript 文件置于文档顶部会导致首屏白屏时间增加；置于文档中部，可能会导致页面只渲染一部分 DOM 后阻塞渲染后一部分 DOM。因此，将外链 JavaScript 文件置于文档尽可能底部的地方是最优的方式。</p><h3 id="为什么要将-css-放在-head-标签里" tabindex="-1"><a class="header-anchor" href="#为什么要将-css-放在-head-标签里"><span>为什么要将 CSS 放在 head 标签里</span></a></h3><p>若是将 CSS（包括<code>style</code>标签内的内部样式和外链 CSS 样式表，下同）放在页面底部即<code>&lt;/body&gt;</code>之前，浏览器会先解析 HTML 并构建 DOM 树，解析到文件底部 CSS 所在位置时，DOM 树基本构建完成，而此时才开始构建 CSSOM 树，导致 DOM 树的构建和 CSSOM 树的构建基本上是串行的。而且在这种情况下，底部的外链 CSS 文件加载时，浏览器会先渲染出一个没有样式的页面（内联样式不会渲染，否则等外链 CSS 文件加载好后，又要结合全部样式再渲染一次），等外链 CSS 文件加载完后会再渲染成一个有样式的页面，页面会出现明显的闪动的现象。</p><p>而将 CSS 放在<code>head</code>标签之间，CSSOM 树的构建可以更早地进行，最终页面也能更早地进行首次渲染。</p><h2 id="domcontentloaded-和-load-事件的触发时机" tabindex="-1"><a class="header-anchor" href="#domcontentloaded-和-load-事件的触发时机"><span>DOMContentLoaded 和 load 事件的触发时机</span></a></h2><p>MDN 的解释：</p><blockquote><p>当初始的 HTML 文档被完全加载和解析完成之后，<code>DOMContentLoaded</code>事件被触发，而无需等待样式表、图像和子框架的完成加载。注意: <code>DOMContentLoaded</code>事件必须等待其所属<code>script</code>之前的样式表加载解析完成才会触发。</p><p>整个页面加载完成之后，包括所有依赖的资源比如样式表和图片，<code>load</code>事件被触发。</p></blockquote><p>MDN 的解释并不是那么地清楚，从上一节“页面首次渲染”来看:</p><ul><li>HTML 文档加载完毕，且 HTML 里引用的内联 JavaScript 和外链 JavaScript 文件都加载完成并执行完成之后，触发<code>DOMContentLoaded</code>事件。 <ul><li>注意: <code>DOMContentLoaded</code>事件必须等待其所属<code>script</code>之前的样式表加载解析完成才会触发。</li><li>注意: 若是外链 JavaScript 文件且存在<code>defer</code>属性，则会在该文件加载执行完成之后，才会触发<code>DOMContentLoaded</code>事件。</li></ul></li><li>HTML 文档里引用的 JavaScript 文件、CSS 文件、图片，以及 JavaScript 代码里异步加载的 JavaScript、CSS 和图片都加载完成之后，触发<code>load</code>事件。注意: <ul><li>HTML 文档里引用的 JavaScript 代码里若是有异步加载的 JavaScript、CSS、图片，是会影响<code>load</code>事件触发的。</li><li><code>video</code>、<code>audio</code>、<code>flash</code>不会影响<code>load</code>事件触发。</li></ul></li></ul><h2 id="浏览器下载并发数" tabindex="-1"><a class="header-anchor" href="#浏览器下载并发数"><span>浏览器下载并发数</span></a></h2><p>浏览器对同一域名下的资源并发下载数，Chrome 为 6 个。超过 6 个的话，之后的下载请求将会在队列中等待。详见<a href="https://developers.google.com/web/tools/chrome-devtools/network/reference#timing-explanation" target="_blank" rel="noopener noreferrer">Timing breakdown phases explained</a>。</p><p>这就是为什么我们要将资源收敛到不同的域名下的原因，就是为了充分利用该机制，最大程度的并发下载所需资源，尽快的完成页面的渲染。</p><h2 id="异步脚本" tabindex="-1"><a class="header-anchor" href="#异步脚本"><span>异步脚本</span></a></h2><h3 id="defer-vs-async" tabindex="-1"><a class="header-anchor" href="#defer-vs-async"><span>defer VS async</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;path/to/myModule.js&quot;</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> defer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;path/to/myModule.js&quot;</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>script</code>标签打开<code>defer</code>或<code>async</code>属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。</p><p><code>defer</code>与<code>async</code>的区别是：<code>defer</code>要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；<code>async</code>一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。一句话，<code>defer</code>是“渲染完再执行”，<code>async</code>是“下载完就执行”。另外，如果有多个<code>defer</code>脚本，会按照它们在页面出现的顺序加载，而多个<code>async</code>脚本是不能保证加载顺序的。</p><h3 id="es6-模块" tabindex="-1"><a class="header-anchor" href="#es6-模块"><span>ES6 模块</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;module&quot;</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./foo.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>浏览器对于带有<code>type=&quot;module&quot;</code>的<code>script</code>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<code>script</code>标签的<code>defer</code>属性。</p><p>如果网页有多个<code>&lt;script type=&quot;module&quot;&gt;</code>，它们会按照在页面出现的顺序依次执行。</p><p><code>script</code>标签的<code>async</code>属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;module&quot;</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./foo.js&quot;</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一旦使用了<code>async</code>属性，<code>&lt;script type=&quot;module&quot;&gt;</code>就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。</p><h2 id="优化技巧" tabindex="-1"><a class="header-anchor" href="#优化技巧"><span>优化技巧</span></a></h2><ul><li>预解析 DNS</li></ul><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dns-prefetch&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://blog.windstone.cc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>预建立 TCP 连接</li></ul><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preconnect&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://blog.windstone.cc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work" target="_blank" rel="noopener noreferrer">MDN - 渲染页面：浏览器的工作原理</a></li><li><a href="https://juejin.cn/post/6844903829528543240" target="_blank" rel="noopener noreferrer">掘金 - 对浏览器首次渲染时间点的探究</a></li><li><a href="https://juejin.im/post/5b2a508ae51d4558de5bd5d1" target="_blank" rel="noopener noreferrer">再谈 load 与 DOMContentLoaded</a></li></ul>', 96)),
    createVNode(_component_global_config)
  ]);
}
const firstPaint_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "first-paint.html.vue"]]);
const data = JSON.parse('{"path":"/browser-env/browser/first-paint.html","title":"页面首次渲染","lang":"en-US","frontmatter":{"description":"页面首次渲染 页面首次渲染的时机，会根据 HTML 里内容的不同以及内容的放置顺序不同而有所区别。 浏览器里，渲染进程的主线程负责解析 HTML，解析会按照由上而下的顺序进行。 讨论页面的首次渲染之前，我们应该明白几个前提知识： 预加载扫描器会在后台预先请求资源，不需要等解析到外链 CSS、JavaScript 文件所在行才去请求资源 外链 CSS 文...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/browser-env/browser/first-paint.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"页面首次渲染"}],["meta",{"property":"og:description","content":"页面首次渲染 页面首次渲染的时机，会根据 HTML 里内容的不同以及内容的放置顺序不同而有所区别。 浏览器里，渲染进程的主线程负责解析 HTML，解析会按照由上而下的顺序进行。 讨论页面的首次渲染之前，我们应该明白几个前提知识： 预加载扫描器会在后台预先请求资源，不需要等解析到外链 CSS、JavaScript 文件所在行才去请求资源 外链 CSS 文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2021-12-28T10:11:07.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-28T10:11:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"页面首次渲染\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-28T10:11:07.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"JavaScript 阻塞和 CSS 阻塞","slug":"javascript-阻塞和-css-阻塞","link":"#javascript-阻塞和-css-阻塞","children":[{"level":3,"title":"CSS 阻塞","slug":"css-阻塞","link":"#css-阻塞","children":[]},{"level":3,"title":"再问一次：CSS 文件的加载会阻塞 DOM 树的解析吗？","slug":"再问一次-css-文件的加载会阻塞-dom-树的解析吗","link":"#再问一次-css-文件的加载会阻塞-dom-树的解析吗","children":[]}]},{"level":2,"title":"页面解析过程","slug":"页面解析过程","link":"#页面解析过程","children":[{"level":3,"title":"head 标签","slug":"head-标签","link":"#head-标签","children":[]},{"level":3,"title":"body 标签","slug":"body-标签","link":"#body-标签","children":[]},{"level":3,"title":"为什么 DOM/CSSOM 树不完整时也会渲染？","slug":"为什么-dom-cssom-树不完整时也会渲染","link":"#为什么-dom-cssom-树不完整时也会渲染","children":[]}]},{"level":2,"title":"资源的放置顺序","slug":"资源的放置顺序","link":"#资源的放置顺序","children":[{"level":3,"title":"为什么要将外链 JavaScript 文件放在文档底部","slug":"为什么要将外链-javascript-文件放在文档底部","link":"#为什么要将外链-javascript-文件放在文档底部","children":[]},{"level":3,"title":"为什么要将 CSS 放在 head 标签里","slug":"为什么要将-css-放在-head-标签里","link":"#为什么要将-css-放在-head-标签里","children":[]}]},{"level":2,"title":"DOMContentLoaded 和 load 事件的触发时机","slug":"domcontentloaded-和-load-事件的触发时机","link":"#domcontentloaded-和-load-事件的触发时机","children":[]},{"level":2,"title":"浏览器下载并发数","slug":"浏览器下载并发数","link":"#浏览器下载并发数","children":[]},{"level":2,"title":"异步脚本","slug":"异步脚本","link":"#异步脚本","children":[{"level":3,"title":"defer VS async","slug":"defer-vs-async","link":"#defer-vs-async","children":[]},{"level":3,"title":"ES6 模块","slug":"es6-模块","link":"#es6-模块","children":[]}]},{"level":2,"title":"优化技巧","slug":"优化技巧","link":"#优化技巧","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1640686267000,"updatedTime":1640686267000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":13.72,"words":4117},"filePathRelative":"browser-env/browser/first-paint.md","localizedDate":"December 28, 2021","autoDesc":true}');
export {
  firstPaint_html as comp,
  data
};
