import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, a as createVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createStaticVNode('<h1 id="koa-相关包" tabindex="-1"><a class="header-anchor" href="#koa-相关包"><span>koa 相关包</span></a></h1><h2 id="koa2-connect" tabindex="-1"><a class="header-anchor" href="#koa2-connect"><span>koa2-connect</span></a></h2><p><a href="https://github.com/cyrilluce/koa2-connect" target="_blank" rel="noopener noreferrer">koa2-connect</a>，在 Koa v2 里使用 Express/Connect 的中间件。</p><h2 id="koa-send、koa-static" tabindex="-1"><a class="header-anchor" href="#koa-send、koa-static"><span>koa-send、koa-static</span></a></h2><p><a href="https://github.com/koajs/send" target="_blank" rel="noopener noreferrer">koa-send</a>，静态文件服务中间件。其核心实现方式是以<code>fs.createReadStream</code>读取服务器本地文件返回给客户端。</p><p><a href="https://github.com/koajs/static" target="_blank" rel="noopener noreferrer">koa-static</a>，Koa 的静态文件服务中间，基于<code>koa-send</code>封装。</p><h2 id="koa-socket-2" tabindex="-1"><a class="header-anchor" href="#koa-socket-2"><span>koa-socket-2</span></a></h2><p><a href="https://github.com/ambelovsky/koa-socket-2" target="_blank" rel="noopener noreferrer">koa-socket-2</a>，Koa 里使用<code>socket.io</code>的语法糖。</p><h2 id="koa-json" tabindex="-1"><a class="header-anchor" href="#koa-json"><span>koa-json</span></a></h2><p><a href="https://github.com/koajs/json" target="_blank" rel="noopener noreferrer">koa-json</a>，将请求的响应结果（<code>ctx.body</code>）按 JSON 格式美化的中间件，还支持将 Node 流对象转换为二进制。</p><h2 id="koa-onerror" tabindex="-1"><a class="header-anchor" href="#koa-onerror"><span>koa-onerror</span></a></h2><p><a href="https://github.com/koajs/onerror" target="_blank" rel="noopener noreferrer">koa-onerror</a>，Koa 的错误处理，非中间件，可以在发生错误时根据请求的类型（比如<code>html</code>/<code>json</code>/<code>text</code>）返回该类型的响应。该插件通过修改<code>ctx</code>的原型<code>app.context</code>上的<code>onerror</code>方法给所有的<code>ctx</code>实例重新设置<code>onerror</code>方法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onerror</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，Koa 的<code>app.context</code>上默认存在<code>onerror</code>方法，该插件覆盖了默认的<code>onerror</code>方法。</p><h2 id="koa-bodyparser" tabindex="-1"><a class="header-anchor" href="#koa-bodyparser"><span>koa-bodyparser</span></a></h2><p><a href="https://github.com/koajs/bodyparser" target="_blank" rel="noopener noreferrer">koa-bodyparser</a>，Koa 的 body 解析中间件，解析后的数据存储在<code>ctx.request.body</code>里。</p><h2 id="koa-router" tabindex="-1"><a class="header-anchor" href="#koa-router"><span>koa-router</span></a></h2><p><a href="https://github.com/ZijianHe/koa-router" target="_blank" rel="noopener noreferrer">koa-router</a>，</p><h2 id="koa-views" tabindex="-1"><a class="header-anchor" href="#koa-views"><span>koa-views</span></a></h2><p><a href="https://github.com/queckezz/koa-views" target="_blank" rel="noopener noreferrer">koa-views</a>，模板渲染中间件，给定要请求的视图名称，传入数据，即可渲染出最终的模板字符串。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;path&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> views</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;koa-views&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> Koa</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;koa&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> app</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Koa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 必须在任何路由中间件之前使用</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">views</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 模板目录，必须是绝对路径，所有的视图都是基于此路径</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/views&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 视图的默认扩展名</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    extension</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;ejs&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> user</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    first</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Tobi&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    last</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Holowaychuk&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  species</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;ferret&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  age</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 渲染 user 视图，默认扩展名是 ejs，参数是 { user }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;user&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- user.ejs --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">%= user.name.first %&gt; is a </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">%= user.age %&gt; year old </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">%= user.species %&gt;.&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="koa-proxy" tabindex="-1"><a class="header-anchor" href="#koa-proxy"><span>koa-proxy</span></a></h2><p><a href="https://github.com/popomore/koa-proxy" target="_blank" rel="noopener noreferrer">koa-proxy</a>，是<code>koa</code>的代理中间件，主要是将请求代理到其他服务器上。</p><h2 id="koa-logger" tabindex="-1"><a class="header-anchor" href="#koa-logger"><span>koa-logger</span></a></h2><p><a href="https://github.com/koajs/logger" target="_blank" rel="noopener noreferrer">koa-logger</a>，<code>koa</code>开发风格的日志中间件。这个中间件应该尽可能靠前放置，以便可以记录下所有的请求和响应。</p>', 26)),
    createVNode(_component_global_config)
  ]);
}
const koa_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "koa.html.vue"]]);
const data = JSON.parse('{"path":"/front-end-engineering/environment/package-manager/third-party-packages/koa.html","title":"koa 相关包","lang":"en-US","frontmatter":{"description":"koa 相关包 koa2-connect koa2-connect，在 Koa v2 里使用 Express/Connect 的中间件。 koa-send、koa-static koa-send，静态文件服务中间件。其核心实现方式是以fs.createReadStream读取服务器本地文件返回给客户端。 koa-static，Koa 的静态文件服务中间...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/front-end-engineering/environment/package-manager/third-party-packages/koa.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"koa 相关包"}],["meta",{"property":"og:description","content":"koa 相关包 koa2-connect koa2-connect，在 Koa v2 里使用 Express/Connect 的中间件。 koa-send、koa-static koa-send，静态文件服务中间件。其核心实现方式是以fs.createReadStream读取服务器本地文件返回给客户端。 koa-static，Koa 的静态文件服务中间..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-31T12:47:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-31T12:47:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"koa 相关包\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-31T12:47:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"koa2-connect","slug":"koa2-connect","link":"#koa2-connect","children":[]},{"level":2,"title":"koa-send、koa-static","slug":"koa-send、koa-static","link":"#koa-send、koa-static","children":[]},{"level":2,"title":"koa-socket-2","slug":"koa-socket-2","link":"#koa-socket-2","children":[]},{"level":2,"title":"koa-json","slug":"koa-json","link":"#koa-json","children":[]},{"level":2,"title":"koa-onerror","slug":"koa-onerror","link":"#koa-onerror","children":[]},{"level":2,"title":"koa-bodyparser","slug":"koa-bodyparser","link":"#koa-bodyparser","children":[]},{"level":2,"title":"koa-router","slug":"koa-router","link":"#koa-router","children":[]},{"level":2,"title":"koa-views","slug":"koa-views","link":"#koa-views","children":[]},{"level":2,"title":"koa-proxy","slug":"koa-proxy","link":"#koa-proxy","children":[]},{"level":2,"title":"koa-logger","slug":"koa-logger","link":"#koa-logger","children":[]}],"git":{"createdTime":1730378820000,"updatedTime":1730378820000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":1.76,"words":527},"filePathRelative":"front-end-engineering/environment/package-manager/third-party-packages/koa.md","localizedDate":"October 31, 2024","autoDesc":true}');
export {
  koa_html as comp,
  data
};
