import { r as resolveComponent, c as createElementBlock, d as createBaseVNode, a as createVNode, e as withCtx, b as createStaticVNode, o as openBlock, f as createTextVNode } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _sfc_main = {};
const _hoisted_1 = { class: "table-of-contents" };
function _sfc_render(_ctx, _cache) {
  const _component_router_link = resolveComponent("router-link");
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[14] || (_cache[14] = createBaseVNode("h1", {
      id: "学习笔记",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#学习笔记"
      }, [
        createBaseVNode("span", null, "学习笔记")
      ])
    ], -1)),
    createBaseVNode("nav", _hoisted_1, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#typescript-系列文章" }, {
            default: withCtx(() => _cache[0] || (_cache[0] = [
              createTextVNode("TypeScript 系列文章")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#其他文章" }, {
            default: withCtx(() => _cache[1] || (_cache[1] = [
              createTextVNode("其他文章")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#核心概念" }, {
            default: withCtx(() => _cache[2] || (_cache[2] = [
              createTextVNode("核心概念")
            ])),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#类型" }, {
                default: withCtx(() => _cache[3] || (_cache[3] = [
                  createTextVNode("类型")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#值" }, {
                default: withCtx(() => _cache[4] || (_cache[4] = [
                  createTextVNode("值")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#命名空间" }, {
                default: withCtx(() => _cache[5] || (_cache[5] = [
                  createTextVNode("命名空间")
                ])),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#简单的组合-一个名字-多种意义" }, {
                default: withCtx(() => _cache[6] || (_cache[6] = [
                  createTextVNode("简单的组合：一个名字，多种意义")
                ])),
                _: 1
              }),
              createBaseVNode("ul", null, [
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#内置组合" }, {
                    default: withCtx(() => _cache[7] || (_cache[7] = [
                      createTextVNode("内置组合")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#用户组合" }, {
                    default: withCtx(() => _cache[8] || (_cache[8] = [
                      createTextVNode("用户组合")
                    ])),
                    _: 1
                  })
                ]),
                createBaseVNode("li", null, [
                  createVNode(_component_router_link, { to: "#高级组合" }, {
                    default: withCtx(() => _cache[9] || (_cache[9] = [
                      createTextVNode("高级组合")
                    ])),
                    _: 1
                  }),
                  createBaseVNode("ul", null, [
                    createBaseVNode("li", null, [
                      createVNode(_component_router_link, { to: "#利用-interface-添加" }, {
                        default: withCtx(() => _cache[10] || (_cache[10] = [
                          createTextVNode("利用 interface 添加")
                        ])),
                        _: 1
                      })
                    ]),
                    createBaseVNode("li", null, [
                      createVNode(_component_router_link, { to: "#使用-namespace-添加" }, {
                        default: withCtx(() => _cache[11] || (_cache[11] = [
                          createTextVNode("使用 namespace 添加")
                        ])),
                        _: 1
                      })
                    ])
                  ])
                ])
              ])
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_router_link, { to: "#使用-export-或-import" }, {
                default: withCtx(() => _cache[12] || (_cache[12] = [
                  createTextVNode("使用 export= 或 import")
                ])),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#其他语法" }, {
            default: withCtx(() => _cache[13] || (_cache[13] = [
              createTextVNode("其他语法")
            ])),
            _: 1
          })
        ])
      ])
    ]),
    _cache[15] || (_cache[15] = createStaticVNode('<h2 id="typescript-系列文章" tabindex="-1"><a class="header-anchor" href="#typescript-系列文章"><span>TypeScript 系列文章</span></a></h2><ul><li>【done】介绍 <ul><li><a href="https://medium.com/jspoint/typescript-a-beginners-guide-6956fe8bcf9e" target="_blank" rel="noopener noreferrer">A beginner’s guide to TypeScript (with some history of the TypeScript)</a></li><li><a href="https://medium.com/jspoint/typescript-hello-world-program-b0826ee3d87d" target="_blank" rel="noopener noreferrer">Writing your first “Hello World” program in TypeScript with ease</a></li><li><a href="https://medium.com/jspoint/typescript-working-with-types-f1829384851f" target="_blank" rel="noopener noreferrer">Understanding the basic “Built-in Data Types” provided by TypeScript</a></li></ul></li><li>【done】复杂的数据类型 <ul><li><a href="https://medium.com/jspoint/typescript-functions-5a2490f6a1ec" target="_blank" rel="noopener noreferrer">A simple guide to “function” data type and function declaration syntax in TypeScript</a></li><li><a href="https://medium.com/jspoint/typescript-interfaces-4a2af07c8070" target="_blank" rel="noopener noreferrer">A simple guide to “interface” data type in TypeScript</a></li><li><a href="https://medium.com/jspoint/typescript-classes-65b4712ac9c8" target="_blank" rel="noopener noreferrer">Introduction to “class” data type and Object-Oriented Programming paradigm in TypeScript</a></li><li><a href="https://medium.com/jspoint/typescript-enums-af03567d662" target="_blank" rel="noopener noreferrer">Working with Enumerations (Enums) in TypeScript</a></li></ul></li><li>类型系统 <ul><li>【done】<a href="https://medium.com/jspoint/typescript-type-system-81fdb84bba75" target="_blank" rel="noopener noreferrer">Understanding the TypeScript’s type system and some must-know concepts</a></li><li>【done】<a href="https://medium.com/jspoint/typescript-utility-types-4d9bfc37745c" target="_blank" rel="noopener noreferrer">Taking a look at must-know “utility types” provided by TypeScript</a></li><li>【done】<a href="https://medium.com/jspoint/typescript-generics-10e99078cc8" target="_blank" rel="noopener noreferrer">Exploring the world of “Generics” (generic data types) in TypeScript</a></li><li><a href="https://medium.com/jspoint/typescript-data-immutability-71dc3e604426" target="_blank" rel="noopener noreferrer">A brief introduction to “Data Immutability” in TypeScript</a></li><li><a href="https://medium.com/jspoint/typescript-polymorphism-d8ea1d690d5c" target="_blank" rel="noopener noreferrer">Let’s quickly understand how “Polymorphism” works in TypeScript</a></li></ul></li><li>新的 ts/js 特性 <ul><li><a href="https://medium.com/jspoint/typescript-promises-and-async-await-b842b55ee3fd" target="_blank" rel="noopener noreferrer">A quick introduction to “Promises” and “Async/Await” (with new features)</a></li><li><a href="https://medium.com/jspoint/anatomy-of-typescript-decorators-and-their-usage-patterns-487729b34ae6" target="_blank" rel="noopener noreferrer">Anatomy of TypeScript “Decorators” and their usage patterns</a></li></ul></li><li>【done】模块系统 <ul><li><a href="https://medium.com/jspoint/typescript-module-system-5022cac310f6" target="_blank" rel="noopener noreferrer">A comprehensive guide to “Module System” in TypeScript (with examples)</a></li><li><a href="https://medium.com/jspoint/typescript-namespaces-f43cd002c08c" target="_blank" rel="noopener noreferrer">Employing “Namespaces” in TypeScript to encapsulate your data</a></li></ul></li><li>【done】TypeScript 编译 <ul><li><a href="https://medium.com/jspoint/typescript-compilation-the-typescript-compiler-4cb15f7244bc" target="_blank" rel="noopener noreferrer">Understanding TypeScript’s “Compilation Process” &amp; the anatomy of “tsconfig.json” file to configure TypeScript Compiler</a></li><li><a href="https://medium.com/jspoint/typescript-compiler-flags-3b1efebedf15" target="_blank" rel="noopener noreferrer">A brief introduction to TypeScript’s command-line interface and compiler settings</a></li><li><a href="https://medium.com/jspoint/typescript-type-declaration-files-4b29077c43" target="_blank" rel="noopener noreferrer">A quick introduction to “Type Declaration” files and adding type support to your JavaScript packages</a></li><li><a href="https://medium.com/jspoint/integrating-typescript-with-webpack-4534e840a02b" target="_blank" rel="noopener noreferrer">Integrating TypeScript with Webpack</a></li></ul></li></ul><h2 id="其他文章" tabindex="-1"><a class="header-anchor" href="#其他文章"><span>其他文章</span></a></h2><ul><li><a href="https://www.cnblogs.com/xuld/p/12180913.html" target="_blank" rel="noopener noreferrer">TypeScript 源码详细解读(1)总览</a></li></ul><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h3><p>类型通过以下方式引入：</p><ul><li>类型别名声明（<code>type sn = number | string;</code>）</li><li>接口声明（<code>interface I { x: number[]; }</code>）</li><li>类声明（<code>class C { }</code>）</li><li>枚举声明（<code>enum E { A, B, C }</code>）</li><li>指向某个类型的<code>import</code>声明</li></ul><p>以上每种声明形式都会创建一个新的类型名称。</p><h3 id="值" tabindex="-1"><a class="header-anchor" href="#值"><span>值</span></a></h3><p>值是运行时名字，可以在表达式里引用。 比如<code>let x = 5;</code>创建一个名为<code>x</code>的值。</p><p>同样，以下方式能够创建值：</p><ul><li><code>let</code>，<code>const</code>，和<code>var</code>声明</li><li>包含值的<code>namespace</code>或<code>module</code>声明</li><li><code>enum</code>声明</li><li><code>class</code>声明</li><li>指向值的<code>import</code>声明</li><li><code>function</code>声明</li></ul><h3 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间"><span>命名空间</span></a></h3><p>类型可以存在于命名空间里。 比如，有这样的声明<code>let x: A.B.C</code>， 我们就认为<code>C</code>类型来自<code>A.B</code>命名空间。这里，<code>A.B</code>不是必需的类型或值。</p><h3 id="简单的组合-一个名字-多种意义" tabindex="-1"><a class="header-anchor" href="#简单的组合-一个名字-多种意义"><span>简单的组合：一个名字，多种意义</span></a></h3><p>一个给定的名字<code>A</code>，我们可以找出三种不同的意义：一个类型，一个值或一个命名空间。 要如何去解析这个名字要看它所在的上下文是怎样的。 比如，在声明<code>let m: A.A = A;</code>， <code>A</code>首先被当做命名空间，然后做为类型名，最后是值。 这些意义最终可能会指向完全不同的声明！</p><h4 id="内置组合" tabindex="-1"><a class="header-anchor" href="#内置组合"><span>内置组合</span></a></h4><p><code>class</code>同时出现在类型和值里。<code>class C {}</code>声明创建了两个东西: 类型<code>C</code>指向类的实例结构，值<code>C</code>指向类构造函数。枚举声明也拥有类似的行为。</p><h4 id="用户组合" tabindex="-1"><a class="header-anchor" href="#用户组合"><span>用户组合</span></a></h4><p>假设我们写了模块文件<code>foo.d.ts</code>:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> SomeVar</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SomeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SomeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样使用它：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#D19A66;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> foo</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./foo&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SomeType</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SomeVar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这可以很好地工作，但是我们知道<code>SomeType</code>和<code>SomeVar</code>很相关。因此我们想让他们有相同的名字。我们可以使用组合通过相同的名字<code>Bar</code>表示这两种不同的对象（值和对象）：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Bar</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这提供了解构使用的机会：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./foo&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bar</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次地，这里我们使用<code>Bar</code>做为类型和值。 注意我们没有声明<code>Bar</code>值为<code>Bar</code>类型，它们是独立的。</p><h4 id="高级组合" tabindex="-1"><a class="header-anchor" href="#高级组合"><span>高级组合</span></a></h4><p>有一些声明能够通过多个声明组合。比如，<code>class C { }</code>和<code>interface C { }</code>可以同时存在并且都可以做为<code>C</code>类型的属性。</p><p>只要不产生冲突就是合法的。一个普通的规则是值总是会和同名的其它值产生冲突除非它们在不同命名空间里，类型冲突则发生在使用类型别名声明的情况下（<code>type s = string</code>），命名空间永远不会发生冲突。</p><p>让我们看看如何使用。</p><h5 id="利用-interface-添加" tabindex="-1"><a class="header-anchor" href="#利用-interface-添加"><span>利用 interface 添加</span></a></h5><p>我们可以使用一个<code>interface</code>往另一个<code>interface</code>声明里添加额外成员：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  x</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ... elsewhere ...</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  y</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// OK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这同样作用于类：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  x</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ... elsewhere ...</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  y</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// OK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们不能使用接口往类型别名里添加成员（<code>type s = string;</code>）</p><h5 id="使用-namespace-添加" tabindex="-1"><a class="header-anchor" href="#使用-namespace-添加"><span>使用 namespace 添加</span></a></h5><p><code>namespace</code>声明可以用来添加新类型，值和命名空间，只要不出现冲突。</p><p>比如，我们可能添加静态成员到一个类：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ... elsewhere ...</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// OK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意在这个例子里，我们添加一个值到<code>C</code>的静态部分（它的构造函数）。这里因为我们添加了一个值，且其它值的容器是另一个值（类型包含于命名空间，命名空间包含于另外的命名空间）。</p><p>我们还可以给类添加一个命名空间类型：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ... elsewhere ...</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// OK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子里，直到我们写了<code>namespace</code>声明才有了命名空间<code>C</code>。作为命名空间的<code>C</code>不会与类创建的值<code>C</code>或类型<code>C</code>相互冲突。</p><p>最后，我们可以通过<code>namespace</code>声明进行不同的合并。这不是特别实际的示例，但是可以展示所有有趣的行为。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Z</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ... elsewhere ...</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> var</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> Y</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> Z</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> X</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子里，第一个代码块创建了以下名字与含义：</p><ul><li>一个值<code>X</code>（因为<code>namespace</code>声明包含一个值，<code>Z</code>）</li><li>一个命名空间<code>X</code>（因为<code>namespace</code>声明包含一个值，<code>Z</code>）</li><li>在命名空间<code>X</code>里的类型<code>Y</code></li><li>在命名空间<code>X</code>里的类型<code>Z</code>（类的实例结构）</li><li>值<code>X</code>的一个属性值<code>Z</code>（类的构造函数）</li></ul><p>第二个代码块创建了以下名字与含义：</p><ul><li>值<code>Y</code>（<code>number</code>类型），它是值<code>X</code>的一个属性</li><li>一个命名空间<code>Z</code></li><li>值<code>Z</code>，它是值<code>X</code>的一个属性</li><li>在<code>X.Z</code>命名空间下的类型<code>C</code></li><li>值<code>X.Z</code>的一个属性值<code>C</code></li><li>类型<code>X</code></li></ul><h3 id="使用-export-或-import" tabindex="-1"><a class="header-anchor" href="#使用-export-或-import"><span>使用 export= 或 import</span></a></h3><p>一个重要的原则是<code>export</code>和<code>import</code>声明会导出或导入目标的所有含义。</p><h2 id="其他语法" tabindex="-1"><a class="header-anchor" href="#其他语法"><span>其他语法</span></a></h2><ul><li><code>import q = x.y.z</code><ul><li>简化命名空间操作的方法，给常用的<code>x.y.z</code>起个短的名字<code>q</code></li><li>详见<a href="https://www.typescriptlang.org/docs/handbook/namespaces.html#aliases" target="_blank" rel="noopener noreferrer">TypeScript - Namespaces - Aliases</a></li></ul></li></ul>', 57)),
    createVNode(_component_global_config)
  ]);
}
const index_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "index.html.vue"]]);
const data = JSON.parse('{"path":"/typescript/","title":"学习笔记","lang":"en-US","frontmatter":{"description":"学习笔记 TypeScript 系列文章 【done】介绍 A beginner’s guide to TypeScript (with some history of the TypeScript) Writing your first “Hello World” program in TypeScript with ease Understandi...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/typescript/"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"学习笔记"}],["meta",{"property":"og:description","content":"学习笔记 TypeScript 系列文章 【done】介绍 A beginner’s guide to TypeScript (with some history of the TypeScript) Writing your first “Hello World” program in TypeScript with ease Understandi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2021-10-24T03:16:16.000Z"}],["meta",{"property":"article:modified_time","content":"2021-10-24T03:16:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"学习笔记\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-10-24T03:16:16.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"TypeScript 系列文章","slug":"typescript-系列文章","link":"#typescript-系列文章","children":[]},{"level":2,"title":"其他文章","slug":"其他文章","link":"#其他文章","children":[]},{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[{"level":3,"title":"类型","slug":"类型","link":"#类型","children":[]},{"level":3,"title":"值","slug":"值","link":"#值","children":[]},{"level":3,"title":"命名空间","slug":"命名空间","link":"#命名空间","children":[]},{"level":3,"title":"简单的组合：一个名字，多种意义","slug":"简单的组合-一个名字-多种意义","link":"#简单的组合-一个名字-多种意义","children":[]},{"level":3,"title":"使用 export= 或 import","slug":"使用-export-或-import","link":"#使用-export-或-import","children":[]}]},{"level":2,"title":"其他语法","slug":"其他语法","link":"#其他语法","children":[]}],"git":{"createdTime":1589813128000,"updatedTime":1635045376000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":5.65,"words":1694},"filePathRelative":"typescript/README.md","localizedDate":"May 18, 2020","autoDesc":true}');
export {
  index_html as comp,
  data
};
