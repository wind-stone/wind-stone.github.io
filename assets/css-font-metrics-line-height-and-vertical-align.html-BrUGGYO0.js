import { r as resolveComponent, c as createElementBlock, d as createBaseVNode, a as createVNode, e as withCtx, b as createStaticVNode, o as openBlock, f as createTextVNode } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _imports_0 = "/assets/picture-1-nqAKjaIn.png";
const _imports_1 = "/assets/picture-3-DKGpS5FU.png";
const _imports_2 = "/assets/picture-4-Dq4P7mGC.png";
const _imports_3 = "/assets/picture-5-Dl2sxrUm.png";
const _imports_4 = "/assets/picture-6-BYFJlZId.png";
const _imports_5 = "/assets/picture-7-hvpMd-G5.png";
const _imports_6 = "/assets/picture-8-CLxAqAuG.png";
const _imports_7 = "/assets/picture-9-BMZmOJA9.png";
const _imports_8 = "/assets/picture-10-DCzTvFRi.png";
const _imports_9 = "/assets/picture-11-Z6Dr-pl2.png";
const _imports_10 = "/assets/picture-12-DyR2yK8P.png";
const _imports_11 = "/assets/picture-13-SxYAvTRy.png";
const _imports_12 = "/assets/picture-14-DH4_sIbV.png";
const _sfc_main = {};
const _hoisted_1 = { class: "table-of-contents" };
function _sfc_render(_ctx, _cache) {
  const _component_router_link = resolveComponent("router-link");
  const _component_css_font_different_fon_family = resolveComponent("css-font-different-fon-family");
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[5] || (_cache[5] = createBaseVNode("h1", {
      id: "深入理解-css-字体度量、line-height-和-vertical-align",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#深入理解-css-字体度量、line-height-和-vertical-align"
      }, [
        createBaseVNode("span", null, "深入理解 CSS：字体度量、line-height 和 vertical-align")
      ])
    ], -1)),
    createBaseVNode("nav", _hoisted_1, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#术语中英文对照" }, {
            default: withCtx(() => _cache[0] || (_cache[0] = [
              createTextVNode("术语中英文对照")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#font-size" }, {
            default: withCtx(() => _cache[1] || (_cache[1] = [
              createTextVNode("font-size")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#line-height" }, {
            default: withCtx(() => _cache[2] || (_cache[2] = [
              createTextVNode("line-height")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#vertical-align" }, {
            default: withCtx(() => _cache[3] || (_cache[3] = [
              createTextVNode("vertical-align")
            ])),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_router_link, { to: "#总结" }, {
            default: withCtx(() => _cache[4] || (_cache[4] = [
              createTextVNode("总结")
            ])),
            _: 1
          })
        ])
      ])
    ]),
    _cache[6] || (_cache[6] = createStaticVNode('<p>翻译自<a href="http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align" target="_blank" rel="noopener noreferrer">Deep dive CSS: font metrics, line-height and vertical-align</a></p><p><code>line-height</code>和<code>vertical-align</code>都是简单的 CSS 属性，简单到我们绝大多数人都自信已经完全明白它们是如何工作的，以及如何使用它们。但是，事实却不是这样。它们确实很复杂，甚至是最难理解的，因为它们在 CSS 鲜为人知的特性————行内格式化上下文（<code>inline formatting context</code>，简称 IFC）的创建中承担着主要的角色。</p><p>举例来说，<code>line-height</code>的值可以设置为一个单位为<code>px</code>的长度值，或者是一个无单位的数字，但是默认值是<code>normal</code>。但是，<code>normal</code>是什么呢？我们经常了解到它可能是<code>1</code>，可能是<code>1.2</code>，甚至<a href="https://www.w3.org/TR/CSS2/visudet.html#propdef-line-height" target="_blank" rel="noopener noreferrer">CSS 规则也没有说清楚这一点</a>。我们知道，若设置<code>line-height</code>为无单位的数字，\b其计算值为相对于<code>font-size</code>的倍数，但问题是，<code>100px</code>在不同的字体族表现不一致\b，那么<code>line-height</code>是相同的呢还是不同的呢？它真的是在<code>1</code>和<code>1.2</code>之间吗？以及，<code>vertical-align</code>与<code>line-height</code>存在什么样的联系呢？</p><p>让我们一起深入了解下不是如此简单的 CSS 机制。</p><h2 id="术语中英文对照" tabindex="-1"><a class="header-anchor" href="#术语中英文对照"><span>术语中英文对照</span></a></h2><ul><li><code>line-box</code>: 行框</li><li><code>content-area</code>: 内容区域</li><li><code>virtual-area</code>: 实际区域</li></ul><h2 id="font-size" tabindex="-1"><a class="header-anchor" href="#font-size"><span>font-size</span></a></h2><p>如下的代码里，<code>p</code>标签包含了 3 个<code>span</code>标签，每一个<code>span</code>\b标签都设置了不同的字体。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Ba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Ba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Ba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { font-size: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { font-family: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Helvetica</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { font-family: Gruppo }</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { font-family: Catamaran }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相同的<code>span</code>元素，使用了相同的<code>font-size</code>，不同的<code>font-family</code>，但最终高度却不一样。</p><p><img src="' + _imports_0 + '" alt="图 1" loading="lazy"><br> 图 1: 相同的<code>font-size</code>，不同的<code>font-family</code>，高度不一样</p><p>实验结果：</p>', 13)),
    createVNode(_component_css_font_different_fon_family),
    _cache[7] || (_cache[7] = createStaticVNode('<p>即使我们意识到这种行为，但是为什么<code>font-size: 100px</code>没创建出<code>100px</code>的高度呢？我已经测量了每个<code>span</code>元素最终的高度值: Helvetica，<code>115px</code>； Gruppo，<code>97px</code>以及 Catamaran，<code>164px</code>。</p><p><img src="' + _imports_0 + '" alt="图 2" loading="lazy"><br> 图 2: <code>font-size: 100px</code>的元素的高度分别为<code>97px</code>/<code>115px</code>/<code>164px</code></p><p>尽管一开始我们会认为有些怪异，但是这完全是符合预期的。原因就在于字体自身，如下说明了它是如何工作的：</p><ul><li>每个字体都定义了<code>em-square</code>(或 UPM, <code>units per em</code>)，这是一种容器，字符将在这个容器里绘制。这个<code>em-square</code>使用的是相对单位，并且通常是 1000 个相对单位，但是相对单位数也可以是 1024、2048 等。</li><li>字体的度量也是基于这种相对单位，比如<code>ascender</code>，<code>descender</code>，<code>capital height</code>，<code>x-height</code>等等。注意，有些度量值可以会超出<code>em-square</code>方框</li><li>浏览器里，相对单位将依据<code>font-size</code>进行相应的缩放，比如<code>font-size: 100px</code>，则 1000 个相对单位的大小即为<code>100px</code>，500 个相对单位即为<code>50px</code></li></ul><p>让我们在<a href="https://fontforge.github.io/en-US/" target="_blank" rel="noopener noreferrer">FontForge</a>里打开 Catamaran 字体，以获取它的一些度量值。</p><ul><li><code>em-square</code>是 1000 个相对单位</li><li><code>ascender</code>是 1100 个相对单位，<code>descender</code>是 540 个相对单位。经过测试发现，Mac OS 上的浏览器使用的是<code>HHead Ascent/Descent</code>值，Windows 使用的是<code>Win Ascent/Descent</code>值，而这两种取值可能还不一样。我们还注意到<code>capital height</code>是 680 个相对单位，<code>x height</code>是 485 个相对单位。</li></ul><p>（译者注:</p><ul><li>这里的<code>ascender</code>值指的是基线到字符顶端的距离</li><li>这里的<code>descender</code>值指的是基线到字符底部的距离</li><li>这里的<code>capital height</code>值指的是大写字母的高度</li><li>这里的<code>x height</code>值指的是小写字母<code>x</code>的高度</li></ul><p>）</p><p><img src="' + _imports_1 + '" alt="图 3" loading="lazy"><br> 图 3: FontForge 上 Catamaran 的字体度量值</p><p>这意味着尽管<code>em-square</code>只有 1000 个相对单位， 但 Catamaran 字体却使用了 1100 + 540 个相对单位，也就是说，当设置<code>font-size: 100px</code>时，Catamaran 字体的文字高度为<code>164px</code>。这个计算高度定义了元素的内容区域<code>content-area</code>，我将在之后解释这个概念。你可以认为，内容区域<code>content-area</code>就是背景属性应用的地方。</p><p>我们还可以看到，大写字母的高度是<code>68px</code>（680 个相对单位），小写字母（<code>x-height</code>）是<code>49px</code>（485 个相对单位）。因此，<code>1ex = 49px</code>，而<code>1em = 100px</code>，而不是<code>164px</code>。（值得感谢的是，<code>em</code>是相对于<code>font-size</code>，而不是计算高度）</p><p><img src="' + _imports_2 + '" alt="图 4" loading="lazy"><br> 图 4: Catamaran 字体，UPM（<code>Units Per Em</code>）和使用<code>font-size: 100px</code>时对应的像素</p><p>在继续深入之前，我们先来看看这解决了什么问题。当<code>p</code>元素渲染在屏幕上时，它会包含多行，具体行数由其内容的宽度决定。每一行都由一或多个行内元素（HTML 标签或匿名行内文本元素）组成，每一行都成为<code>line-box</code>。<code>line-box</code>的高度是基于它子元素的高度。浏览器会计算这一行里每一个行内元素的高度，最后计算出<code>line-box</code>的高度，即取最高的子元素的上边界和最低子元素的下边界之间的距离。因此默认情况下，<code>line-box</code>总是足够高以包含它所有的子元素。</p><blockquote><p>每一个 HTML 元素实际上都是由一到多个<code>line-box</code>组成的，只要你知道每一个<code>line-box</code>的高度，你就能知道这个元素的高度。</p></blockquote><p>如果我们像下面这样修改之前的 HTML 代码：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Good design will be better.</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Ba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Ba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Ba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    We get to make a consequence.</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将生成 3 个<code>line-box</code>:</p><ul><li>第一个和最后一个<code>line-box</code>都包含了一个简单的匿名行内文本元素</li><li>第二个<code>line-box</code>包含了两个匿名行内文本元素，和 3 个<code>span</code>元素</li></ul><p><img src="' + _imports_3 + '" alt="图 5" loading="lazy"><br> 图 5: <code>p</code>元素（黑色边框）有多个<code>line-box</code>（白色边框）组成，<code>line-box</code>里包含了行内元素（实线边框）和匿名行内元素（虚线边框）</p><p>我们可以明显的看到，第二个<code>line-box</code>比其他两个要更高一些，因为它子元素的<code>content-area</code>，更确切地说，使用了 Catamaran 字体的子元素的<code>content-area</code>。</p><p>关于<code>line-box</code>的创建最难的是，我们无法看见，也无法通过 CSS 控制。即使对<code>::first-line</code>伪类添加背景也不能给我们任何关于第一个<code>line-box</code>高度的视觉效果。</p><h2 id="line-height" tabindex="-1"><a class="header-anchor" href="#line-height"><span>line-height</span></a></h2><p>到现在为止，我介绍了两个概念：<code>content-area</code>和<code>line-box</code>。如果你仔细阅读，你会发现我说过<code>line-box</code>的高度是根据它子元素的高度计算而来的，但并没有说是它子元素\b<code>content-area</code>的高度，这二者区别甚大。</p><p>一个行内元素有两个不同的高度：内容区域<code>content-area</code>高度和实际区域<code>virtual-area</code>高度（我发明了<code>virtual-area</code>这个术语，作为对于我们来说不可见的高度，你在规格文档里找不到这个术语）。</p><ul><li><code>content-area</code>高度通过字体度量定义</li><li><code>virtual-area</code>高度就是<code>line-height</code>，并且它\b会被用于计算<code>line-box</code>的高度</li></ul><p>(译者注：这里的<code>content-area</code>高度是实际上绘制出来的高度，但是<code>virtual-area</code>高度是元素实际占据位置的高度。针对<code>font-size: 16px; line-height: 12px</code>的元素，其最终绘制出来的<code>content-area</code>高度是通过<code>font-size: 16px</code>和字体度量计算出来的，即用户能看到的字体最顶端到最底端的距离；而这个元素的<code>virtual-area</code>只占据了<code>12px</code>的高度。因此，在这种<code>line-height</code>小于<code>font-size</code>的情况下，我们可能会看到文字重叠在一起)</p><p><img src="' + _imports_4 + '" alt="图 6" loading="lazy"><br> 图 6: 行内元素有两个不同的高度</p><p>也就是说\b，这打破了“<code>line-height</code>是基线之间的距离”这一广受欢迎的说法，在 CSS 里，不是这样。</p><p><img src="' + _imports_5 + '" alt="图 7" loading="lazy"><br> 图 7: CSS 里，<code>line-height</code>不是基线之间的距离</p><p><code>virtual-area</code>高度和<code>content-area</code>高度的差值，称之为<code>leading</code>。<code>leading</code>的一半添加\b到<code>content-area</code>的顶部，另一半添加到<code>content-area</code>的底部。因此，<code>content-area</code>总是在<code>virtual-area</code>的中间位置。</p><p>经过计算之后，<code>line-height</code>（也就是<code>virtual-area</code>的高度）可以与<code>content-area</code>高度相同，也可以更大或更小。若是<code>leading</code>是\b负数，则<code>virtual-area</code>高度就比<code>content-area</code>高度要小，而且<code>line-box</code>实际上也会比其子元素要小。</p><p>这里罗列了其他几种行内元素：</p><ul><li>可替换行内元素（<code>img</code>，<code>input</code>，<code>svg</code>元素等）</li><li><code>display</code>为<code>inline-block</code>或<code>inline-*</code>的元素</li><li>参与特定格式化上下文的行内元素（比如，<code>flex</code>布局元素的所有直接子元素的<code>display</code>都是<code>blockified</code>）</li></ul><p>对于上面这些特定的行内元素，其高度是基于它们的<code>height</code>、<code>margin</code>、<code>border</code>属性来计算的（译者注: 漏掉了<code>padding</code>？另外，这里行内元素的高度应该是指包括<code>height</code>、<code>border</code>、<code>padding</code>在内的元素的总高度，即行内框<code>inline box</code>的高度）。若是将<code>height</code>设为<code>auto</code>，则<code>line-height</code>将被使用，且<code>content-area</code>严格等于<code>line-height</code>（译者注: 即此时<code>height</code>的计算值等于<code>line-height</code>的计算值）。</p><p><img src="' + _imports_6 + '" alt="图 8" loading="lazy"><br> 图 8: 行内替换元素、<code>inline-block</code>元素、<code>inline-*</code>以及<code>blocksified</code>行内元素，其内容区域等同于<code>height</code>或<code>line-height</code></p><p>然而，我们现在仍然没弄明白<code>line-height: normal</code>的值到底是什么。这个答案，关系到<code>content-area</code>高度的计算，就藏在字体度量里面。让我们回到 FontForge，Catamaran 字体的<code>em-square</code>是 1000，但是我们见到了很多<code>ascender</code>/<code>descender</code>的值：</p><ul><li><code>generals Ascent/Descent</code>: <code>ascender</code>是 770，<code>descender</code>是 230，用于绘制字符。(table “OS/2”)</li><li><code>metrics Ascent/Descent</code>: <code>ascender</code>是 1100，<code>descender</code>是 540，用于计算<code>content-area</code>的高度。(table “hhea” and table “OS/2”)</li><li><code>metric Line Gap</code>: 用于<code>line-height: normal</code>, 通过将这个值添加到<code>metrics Ascent/Descent</code> . (table “hhea”)</li></ul><p>在这个场景里，Catamaran 字体定义的<code>Line Gap</code>是 0，那么<code>line-height: normal</code>将等于<code>content-area</code>，即 1640 个相对单位，或者说是 1.64（即<code>em-square</code>的 1.64 倍）。</p><p>作为比较，Arial 字体的<code>em-square</code>是 2048 个相对单位，<code>ascender</code>是 1854 个相对单位，<code>descender</code>是 434 个相对单位，<code>Line Gap</code>是 67 个相对单位。这也就是说，<code>font-size: 100px</code>时，</p><ul><li><code>content-area</code>的高度为 112px，即 (1854 + 434) / 2048 * 100px = 111.72px</li><li><code>line-height: normal</code>的值为 115px，即 (1854 + 434 + 67) / 2048 * 100px = 115px</li></ul><p>所有这些度量都是与指定字体相关的，也是由字体设计师设置的。</p><p>如此看来，设置<code>line-height: 1</code>是个很糟糕的实践。设置<code>line-height</code>为无单位的数字，其值是相对于<code>font-size</code>的，而不是相对于<code>content-area</code>，因此导致<code>virtual-area</code>比<code>content-area</code>要小，这也是很多问题的原因。</p><p><img src="' + _imports_7 + '" alt="图 9" loading="lazy"><br> 图 9: 使用<code>line-height: 1</code>会创建一个比<code>content-area</code>小的<code>line-box</code></p><p>但不仅是<code>line-height: 1</code>有问题。我电脑上从 Google Web Fonts 安装的 1117 款字体，其中 95% 约 1059 款字体计算出的<code>line-height</code>要比 1 大，它们计算出的<code>line-height</code>最小是 0.618，最大是 3.378。你没看错，是 3.378！</p><p>行框<code>line-box</code>计算的一些小细节：</p><ul><li>对于行内元素，<code>padding</code>和<code>border</code>增大了背景区域，但是不会增大<code>content-area</code>的高度（也不会增大<code>line-height</code>的高度）。因此你通常在屏幕上看到的并不是<code>content-area</code>，<code>margin-top</code>和<code>margin-bottom</code>也不会起作用。</li><li>对于可替换的行内元素、<code>inline-block</code>元素和<code>blocksified</code>行内元素，<code>padding</code>、<code>margin</code>和<code>border</code>会增大<code>height</code>，<code>content-area</code>，以及行框<code>line-box</code>的高度。（译者注: <code>padding</code>、<code>margin</code>和<code>border</code>应该只会影响到<code>line-box</code>的高度，不会影响<code>height</code>和<code>content-area</code>）</li></ul><h2 id="vertical-align" tabindex="-1"><a class="header-anchor" href="#vertical-align"><span>vertical-align</span></a></h2><p>我还没提到<code>vertical-align</code>属性，尽管它是计算行框<code>line-box</code>高度的必要因素。我们甚至可以说，<code>vertical-align</code>可能占据着行内格式化上下文 IFC 中是主导性的位置。</p><p><code>vertical-align</code>属性的默认值是<code>baseline</code>。你还记得字体度量的<code>ascender</code>和<code>descender</code>？这些值决定了<code>baseline</code>的位置，以及比率。由于<code>ascenders</code>和<code>descender</code>的比率很少有 1:1 的，这将导致一些超出预期的结果，比如相邻的两个元素：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Ba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Ba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    font-family: Catamaran;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    font-size: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    line-height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>p</code>标签有两个相邻的<code>span</code>元素，继承了<code>font-family</code>、<code>font-size</code>、以及固定的<code>line-height</code>。它们将基于基线对齐，并且行框<code>line-box</code>的高度等于<code>span</code>的<code>line-height</code>。</p><p><img src="' + _imports_8 + '" alt="图 10" loading="lazy"><br> 图 10: 相同的<code>font-family</code>、相同的<code>baseline</code>，一切看起来都正常</p><p>但是给第二个<code>span</code>设置一个更小的<code>font-size</code>呢？</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:last-child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    font-size: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这看起来有些奇怪，默认的基线对齐导致产生了更高的行框<code>line-box</code>，如下图所示。我之前说过，行框<code>line-box</code>高度是由最高子元素的顶边到最低子元素的底边计算而来的。</p><p><img src="' + _imports_9 + '" alt="图 11" loading="lazy"><br> 图 11: 子元素设置了更小的<code>font-size</code>，导致产生了更高的行框<code>line-box</code></p><p>这个例子可以作为一个论据，以支持“<code>line-height</code>的值应该使用无单位的数字”，但是有时候你需要将<code>line-height</code>写成固定值以创建更好的排版。实话说，不管你选择哪种方式，你都将在行内对齐上遇到麻烦。</p><p>让我们再来看个例子。一个<code>p</code>标签，<code>line-height: 200px</code>，包含了单个<code>span</code>标签，并继承了<code>line-height</code>。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Ba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    line-height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    font-family: Catamaran;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    font-size: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么行框<code>line-box</code>是多高呢？我们期望是<code>200px</code>，但是实际上不是。问题就在于<code>p</code>元素有自己的<code>font-family</code>（默认是<code>serif</code>），这与<code>span</code>的<code>font-family</code>不一样。<code>p</code>元素和<code>span</code>元素的<code>baseline</code>位置是不一样的，因此行框<code>line-box</code>的高度比期望的高。这种问题的发生，是因为浏览器会认为每一个行框<code>line-box</code>的起始位置有一个零宽度的字符，规格文档里称为<code>strut</code>，这个字符将参与行框<code>line-box</code>高度的计算。</p><blockquote><p>不可见的字符，但是会导致可见的影响。</p></blockquote><p>让我们继续之前的问题。</p><p><img src="' + _imports_10 + '" alt="图 12" loading="lazy"><br> 图 12: 每个子元素对齐时，会认为行框<code>line-box</code>起始位置有一个不可见的零宽度的字符</p><p>基线<code>baseline</code>对齐，令人费解。那么<code>vertical-align: middle</code>会不会好一些呢？就像你从规则文档里了解到的，<code>middle</code>是“对齐行内框的垂直中心点，对齐点是<code>parent box</code>的<code>baseline</code>加上<code>parent box</code>中<code>x-height</code>的一半的高度”。基线<code>baseline</code>的位置与字体有关，<code>x-height</code>也是，因此<code>middle</code>对齐也是不可靠的。更糟糕的是，在绝大多数场景里，<code>middle</code>并不是真正的“中心点”，这个过程里有太多因素（比如<code>x-height</code>, <code>ascender</code>/<code>descender</code>的比率等）参与，因此不能通过 CSS 来实现。</p><p>顺便说一下，还有四个其他值，在一些场景里可能有用：</p><ul><li><code>vertical-align: top / bottom</code>: 以行框<code>line-box</code>的顶部或底部对齐</li><li><code>vertical-align: text-top / text-bottom</code>: 以<code>content-area</code>的顶部或底部对齐</li></ul><p><img src="' + _imports_11 + '" alt="图 13" loading="lazy"><br> 图 13: <code>vertical-align: top/bottom/text-top/text-bottom</code></p><p>但你仍然需要小心，在大多数情况下，对齐的是实际区域<code>virtual-area</code>，也就是不可见的高度。如下这个示例使用了<code>vertical-align: top</code>，不可见的<code>line-height</code>可能产生奇怪的但是意料之中的结果。</p><p><img src="' + _imports_12 + '" alt="图 14" loading="lazy"><br> 图 14: <code>vertical-align</code>可能产生奇怪的结果，但是当考虑到<code>line-height</code>后，就理所当然了</p><p>最后，<code>vertical-align</code>的值也可以是数字，这将相对于基线<code>baseline</code>提升或降低整个行内框，不到万不得已的时候，最好别用。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>行内格式化上下文 IFC 真的很难理解</li><li>所有的行内元素有两种高度： <ul><li>内容区域<code>content-area</code>高度（基于字体度量）</li><li>实际区域<code>virtual-area</code>高度（<code>line-height</code>）</li><li>这两种高度，你都是不可见的</li></ul></li><li><code>line-height: normal</code>基于字体度量</li><li><code>line-height: 1</code>可能创建导致实际区域<code>virtual-area</code>比内容区域<code>content-area</code>要小</li><li><code>vertical-align</code>不是特别可靠</li><li>行框<code>line-box</code>的高度是基于子元素的<code>line-height</code>和<code>vertical-align</code>属性计算得出的</li><li>我们无法轻易通过 CSS 获取或设置字体度量</li></ul>', 75)),
    createVNode(_component_global_config)
  ]);
}
const cssFontMetricsLineHeightAndVerticalAlign_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "css-font-metrics-line-height-and-vertical-align.html.vue"]]);
const data = JSON.parse('{"path":"/css/font/css-font-metrics-line-height-and-vertical-align.html","title":"深入理解 CSS：字体度量、line-height 和 vertical-align","lang":"en-US","frontmatter":{"description":"深入理解 CSS：字体度量、line-height 和 vertical-align 翻译自Deep dive CSS: font metrics, line-height and vertical-align line-height和vertical-align都是简单的 CSS 属性，简单到我们绝大多数人都自信已经完全明白它们是如何工作的，以及如何...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/css/font/css-font-metrics-line-height-and-vertical-align.html"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"深入理解 CSS：字体度量、line-height 和 vertical-align"}],["meta",{"property":"og:description","content":"深入理解 CSS：字体度量、line-height 和 vertical-align 翻译自Deep dive CSS: font metrics, line-height and vertical-align line-height和vertical-align都是简单的 CSS 属性，简单到我们绝大多数人都自信已经完全明白它们是如何工作的，以及如何..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2022-11-07T03:38:58.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-07T03:38:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入理解 CSS：字体度量、line-height 和 vertical-align\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-07T03:38:58.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"术语中英文对照","slug":"术语中英文对照","link":"#术语中英文对照","children":[]},{"level":2,"title":"font-size","slug":"font-size","link":"#font-size","children":[]},{"level":2,"title":"line-height","slug":"line-height","link":"#line-height","children":[]},{"level":2,"title":"vertical-align","slug":"vertical-align","link":"#vertical-align","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1554740546000,"updatedTime":1667792338000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":3}]},"readingTime":{"minutes":13.89,"words":4168},"filePathRelative":"css/font/css-font-metrics-line-height-and-vertical-align.md","localizedDate":"April 9, 2019","autoDesc":true}');
export {
  cssFontMetricsLineHeightAndVerticalAlign_html as comp,
  data
};
