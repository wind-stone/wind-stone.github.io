import { r as resolveComponent, c as createElementBlock, b as createStaticVNode, a as createVNode, o as openBlock } from "./app-DNVdkGQA.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper-1tPrXgE0.js";
const _imports_0 = "/assets/textual-and-binary-format-C-8mDo_n.png";
const _imports_1 = "/assets/javascript-engine-excute-process-C8i5FRfH.png";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_global_config = resolveComponent("global-config");
  return openBlock(), createElementBlock("div", null, [
    _cache[0] || (_cache[0] = createStaticVNode('<h1 id="webassemply" tabindex="-1"><a class="header-anchor" href="#webassemply"><span>WebAssemply</span></a></h1><h2 id="什么是-webassemply" tabindex="-1"><a class="header-anchor" href="#什么是-webassemply"><span>什么是 WebAssemply？</span></a></h2><ul><li>WebAssembly 是一种低层的二进制格式代码，体积小，因此加载和执行速度快，可以在网络上获得更好的性能。</li><li>WebAssembly 具有易于阅读的文本格式（<code>.wat</code>），但实际提供给浏览器（<code>.wasm</code>）的内容是二进制格式。</li><li>你不需要直接编写 WebAssemply，WebAssembly 允许将 C、C++、Typescript 或 Rust 代码编译成 WebAssembly 模块（WebAssembly 是强制静态类型语言），可以在 Web 应用中加载并通过 JavaScript 调用，因此可以使客户端应用程序能够以接近本地的性能在 Web 上运行。</li><li>WebAssembly 代码驻留在<code>.wasm</code>文件中，这个文件应该被编译成特定于它所运行的机器的机器码。</li><li>WebAssembly 文件里的内容类似于字节码，但是 WebAssembly 是跨平台的，最终由浏览器来将其编译为不同处理器架构需要的机器码</li></ul><figure><img src="' + _imports_0 + '" alt="WebAssembly 的文本格式和二进制格式" tabindex="0" loading="lazy"><figcaption>WebAssembly 的文本格式和二进制格式</figcaption></figure><h2 id="webassemply-与汇编语言的关系" tabindex="-1"><a class="header-anchor" href="#webassemply-与汇编语言的关系"><span>WebAssemply 与汇编语言的关系？</span></a></h2><ul><li>Assembly（汇编）是一种低级编程语言，它与体系结构的机器级指令有着非常密切的联系。换句话说，它只需一个进程就可以转换为机器可以理解的代码，即机器代码（Machine Code）。此转换过程称为汇编。</li><li>WebAssembly 可以简称为 Web 的汇编。它是一种类似于汇编语言的低级语言。但 WebAssembly 并不完全是一种汇编语言，因为 WebAssembly 并不适配特定机器，只适配浏览器。当浏览器下载 WebAssembly 代码时，可以快速将其转换为任何机器的汇编。</li></ul><h2 id="webassemply-与-javascript-的关系" tabindex="-1"><a class="header-anchor" href="#webassemply-与-javascript-的关系"><span>WebAssemply 与 JavaScript 的关系？</span></a></h2><figure><img src="' + _imports_1 + '" alt="Microsoft Edge 浏览器的 JavaScript 引擎 ChakraCore 的结构" tabindex="0" loading="lazy"><figcaption>Microsoft Edge 浏览器的 JavaScript 引擎 ChakraCore 的结构</figcaption></figure><p>以上是 Microsoft Edge 浏览器的 JavaScript 引擎 ChakraCore 的结构。</p><ul><li>JavaScript 源码会进入 Parser，Parser 会把代码转化成 AST（抽象语法树）</li><li>根据抽象语法树，Bytecode Compiler 字节码编译器会生成引擎能够直接阅读、执行的字节码</li><li>字节码进入翻译器，将字节码一行一行的翻译成效率十分高的 Machine Code</li></ul><p>在 JavaScript 运行的过程中，JavaScript 引擎会对执行次数较多的 JavaScript 函数进行优化，JavaScript 引擎将其代码编译成 Machine Code 后打包送到顶部的 Just-In-Time(JIT) Compiler，下次再执行这个函数时就会直接执行编译好的 Machine Code。但是由于 JavaScript 的动态变量，上一秒可能是 Array，下一秒就变成了 Object。那么上一次引擎所做的优化，就失去了作用，此时又要再一次进行优化（JavaScript 引擎会根据字节码里的反馈向量来判断类型，进而判断是直接使用 Machine Code 还是再编译成字节码）。</p><p>JavaScript 源码要经过 Parser，要经过 ByteCode Compiler，而这两步是 JavaScript 代码在引擎执行过程当中消耗时间最多的两步。而 WebAssembly 不用经过这两步。这就是 WebAssembly 更快的原因。</p><p>WebAssembly 是被设计成 JavaScript 的一个完善、补充，而不是一个替代品。WebAssembly 将很多编程语言带到了 Web 中。但是 JavaScript 因其不可思议的能力，仍然将保留现有的地位。</p><h2 id="字节码" tabindex="-1"><a class="header-anchor" href="#字节码"><span>字节码</span></a></h2><ul><li>字节码是一种运行于某种虚拟机中的，更抽象的汇编</li><li>字节码是机器代码的抽象</li><li>不同 JavaScript 引擎有不同的字节码，但某个引擎的字节码是跨平台的</li></ul><p>参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/28590489" target="_blank" rel="noopener noreferrer">理解 V8 的字节码「译」</a></li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://www.infoq.cn/article/lwlcldgjyc7lye95ewl8" target="_blank" rel="noopener noreferrer">WebAssembly 完全入门：了解 wasm 的前世今身</a></li><li><a href="https://zhuanlan.zhihu.com/p/42718990" target="_blank" rel="noopener noreferrer">WebAssembly 简介</a></li></ul>', 19)),
    createVNode(_component_global_config)
  ]);
}
const index_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "index.html.vue"]]);
const data = JSON.parse('{"path":"/js/web-assembly/","title":"WebAssemply","lang":"en-US","frontmatter":{"description":"WebAssemply 什么是 WebAssemply？ WebAssembly 是一种低层的二进制格式代码，体积小，因此加载和执行速度快，可以在网络上获得更好的性能。 WebAssembly 具有易于阅读的文本格式（.wat），但实际提供给浏览器（.wasm）的内容是二进制格式。 你不需要直接编写 WebAssemply，WebAssembly 允许...","head":[["meta",{"property":"og:url","content":"https://blog.windstone.cc/js/web-assembly/"}],["meta",{"property":"og:site_name","content":"风动之石的博客"}],["meta",{"property":"og:title","content":"WebAssemply"}],["meta",{"property":"og:description","content":"WebAssemply 什么是 WebAssemply？ WebAssembly 是一种低层的二进制格式代码，体积小，因此加载和执行速度快，可以在网络上获得更好的性能。 WebAssembly 具有易于阅读的文本格式（.wat），但实际提供给浏览器（.wasm）的内容是二进制格式。 你不需要直接编写 WebAssemply，WebAssembly 允许..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2022-05-17T06:11:04.000Z"}],["meta",{"property":"article:modified_time","content":"2022-05-17T06:11:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebAssemply\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-05-17T06:11:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是 WebAssemply？","slug":"什么是-webassemply","link":"#什么是-webassemply","children":[]},{"level":2,"title":"WebAssemply 与汇编语言的关系？","slug":"webassemply-与汇编语言的关系","link":"#webassemply-与汇编语言的关系","children":[]},{"level":2,"title":"WebAssemply 与 JavaScript 的关系？","slug":"webassemply-与-javascript-的关系","link":"#webassemply-与-javascript-的关系","children":[]},{"level":2,"title":"字节码","slug":"字节码","link":"#字节码","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1652767864000,"updatedTime":1652767864000,"contributors":[{"name":"wind-stone","email":"wind-stone@qq.com","commits":1}]},"readingTime":{"minutes":3.06,"words":917},"filePathRelative":"js/web-assembly/index.md","localizedDate":"May 17, 2022","autoDesc":true}');
export {
  index_html as comp,
  data
};
